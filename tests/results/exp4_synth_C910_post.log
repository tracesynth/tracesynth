now is the 1 iteration
synth ppo by litmus test 0
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
validate: R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0166s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x7=0; }
1
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_r_w;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];fencerel(Fence.r.w);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c00564b0> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c40b8860>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0117s
#Executions: 9

complete exe list
get new mm
uninit_func_list
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '([R];po\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])']
ppo [R];po;[R] index 0
[R];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
([R];po\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
ppo [R];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [R];fencerel(Fence.r.w);[R],relax is False
[R];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
ppo [R];fencerel(Fence.r.w);[R] index 0
[R];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
ppo [R];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
validate: R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
check ppo [R];po;[R] False
check ppo [R];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
check ppo [R];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
candidate_ppo: [R];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.w);[R] [R];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 1
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
validate: R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0156s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x7=0; }
1
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_w_rw;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.w.rw);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c1173b30> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c015f320>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0114s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.rw);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.rw);[R],relax is False
[R];fencerel(Fence.w.rw);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]']
ppo [R];fencerel(Fence.w.rw);[R] index 0
[R];fencerel(Fence.w.rw);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
ppo [R];fencerel(Fence.w.rw);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
check ppo [R];fencerel(Fence.w.rw);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
candidate_ppo: [R];fencerel(Fence.w.rw);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[R] [R];fencerel(Fence.w.rw);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 2
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
validate: R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0638s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x9=2; }
1
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_rw_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.rw.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.rw.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c23b66c0> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c25b5610>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0287s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];fencerel(Fence.rw.r);[W],relax is False
[R];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]']
ppo [R];fencerel(Fence.rw.r);[W] index 0
[R];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
ppo [R];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
check ppo [R];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
candidate_ppo: [R];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.rw.r);[W] [R];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 3
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
validate: R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0659s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x9=2; }
1
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_r_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];fencerel(Fence.r.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c079ef90> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c0651970>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0303s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];fencerel(Fence.r.r);[W],relax is False
[R];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]']
ppo [R];fencerel(Fence.r.r);[W] index 0
[R];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
ppo [R];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
check ppo [R];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
candidate_ppo: [R];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.r);[W] [R];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 4
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
validate: R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0659s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x9=2; }
1
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];fencerel(Fence.w.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c12505c0> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c1967950>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0376s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];fencerel(Fence.w.r);[W],relax is False
[R];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]']
ppo [R];fencerel(Fence.w.r);[W] index 0
[R];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
ppo [R];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
check ppo [R];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
candidate_ppo: [R];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.r);[W] [R];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 5
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
validate: W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0793s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x7=0; 1:x9=2; }
1
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_w;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.w);[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c37b6780> [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c196a540>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0306s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];fencerel(Fence.r.w);[R],relax is False
[W];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]']
ppo [W];fencerel(Fence.r.w);[R] index 0
[W];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
ppo [W];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
check ppo [W];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
validate: W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
validate: W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
candidate_ppo: [W];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[R] [W];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 6
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
validate: R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.0616s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x9=2; }
1
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_rw;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];fencerel(Fence.w.rw);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c1774c80> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c3619250>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.0374s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];fencerel(Fence.w.rw);[W], relax is False
ID: 0 cur candidate_ppo: [R];fencerel(Fence.w.rw);[W],relax is False
[R];fencerel(Fence.w.rw);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]']
ppo [R];fencerel(Fence.w.rw);[W] index 0
[R];fencerel(Fence.w.rw);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
ppo [R];fencerel(Fence.w.rw);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
check ppo [R];fencerel(Fence.w.rw);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
validate: R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
candidate_ppo: [R];fencerel(Fence.w.rw);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[W] [R];fencerel(Fence.w.rw);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 7
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
validate: W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.3671s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x9=2; 1:x9=2; }
1
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_rw_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];fencerel(Fence.rw.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.rw.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c13b7740> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c1728e00>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.0576s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];fencerel(Fence.rw.r);[W],relax is False
[W];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]']
ppo [W];fencerel(Fence.rw.r);[W] index 0
[W];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
ppo [W];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
check ppo [W];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
candidate_ppo: [W];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.rw.r);[W] [W];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 8
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
validate: W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.3779s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x9=2; 1:x9=2; }
1
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_w;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.w);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c0b23ef0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c189ba70>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.1179s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];fencerel(Fence.r.w);[W], relax is False
ID: 0 cur candidate_ppo: [W];fencerel(Fence.r.w);[W],relax is False
[W];fencerel(Fence.r.w);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]']
ppo [W];fencerel(Fence.r.w);[W] index 0
[W];fencerel(Fence.r.w);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
ppo [W];fencerel(Fence.r.w);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
check ppo [W];fencerel(Fence.r.w);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
candidate_ppo: [W];fencerel(Fence.r.w);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[W] [W];fencerel(Fence.r.w);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 9
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
validate: W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.3488s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x9=2; 1:x9=2; }
1
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.r.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67c0566ab0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c0c1d190>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.1082s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];fencerel(Fence.r.r);[W],relax is False
[W];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]']
ppo [W];fencerel(Fence.r.r);[W] index 0
[W];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
ppo [W];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
check ppo [W];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
candidate_ppo: [W];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.r);[W] [W];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 10
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
validate: W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.3780s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x9=2; 1:x9=2; }
1
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_w_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.w.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.w.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb407a0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c0ba8c80>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.0592s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];fencerel(Fence.w.r);[W],relax is False
[W];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]']
ppo [W];fencerel(Fence.w.r);[W] index 0
[W];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
ppo [W];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
check ppo [W];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
candidate_ppo: [W];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.w.r);[W] [W];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 11
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
validate: W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe  0.3372s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x9=2; 1:x9=2; }
1
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;W;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po_loc(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[W];po-loc;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[W];po-loc;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[W];po-loc;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[W];po-loc;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[W];po-loc;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[W];po-loc;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'po_loc']
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'po_loc']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po']
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb43230> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c0cc3c20>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67c0651250>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe  0.1097s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 1
candidate_ppos size: 0
===== run all new tests on the validated candidate ppos =====
check these ppo
start check
check counter ppo
==== candidate ppo ====
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 12
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
           P0           |         P1           ;
<0x00> lr.w x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> bne x5, x0, LC00 | <0x04> sw x5, 0(x6)  ;
LC00:                   | <0x08> fence rw, rw  ;
<0x08> lw x7, 0(x8)     | <0x0C> ori x7, x0, 1 ;
                        | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe  0.0260s
#Executions: 36

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x5=1; 0:x7=0; }
1
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['ctrl', 'po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')]
[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo XLr;ctrl;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.ctrl(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['ctrl', 'po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')], [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];ctrl;[R] target_ppo [XLr];ctrl;[R]
add_rels_final
add rel final P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['ctrl', 'po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')], [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];ctrl;[R] target_ppo [XLr];ctrl;[R]
insert_path [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	]]
ppo [XLr];ctrl;[R]
e1 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [XLr];ctrl;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [XLr];ctrl;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpCtrldR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo XLr;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['ctrl', 'po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')], [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];ctrl;[R] target_ppo [XLr];po;[R]
need_check_ppo [XLr];po;[R] target_ppo [XLr];po;[R]
add_rels_final
add rel final P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['ctrl', 'po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['ctrl', 'po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'ctrl')], [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];ctrl;[R] target_ppo [XLr];po;[R]
need_check_ppo [XLr];po;[R] target_ppo [XLr];po;[R]
insert_path [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	]]
ppo [XLr];po;[R]
e1 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [XLr];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [XLr];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb439b0> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c0cebef0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
           P0           |         P1           ;
<0x00> lr.w x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> bne x5, x0, LC00 | <0x04> sw x5, 0(x6)  ;
LC00:                   | <0x08> fence rw, rw  ;
<0x08> lw x7, 0(x8)     | <0x0C> ori x7, x0, 1 ;
                        | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe  0.0206s
#Executions: 18

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [XLr];po;[R], relax is False
candidate_ppo: [XLr];ctrl;[R], relax is False
ID: 0 cur candidate_ppo: [XLr];po;[R],relax is False
[XLr];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [XLr];po;[R] contain_flag False can_relax_flag False
add ppo [XLr];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]']
ppo [XLr];po;[R] index 0
[XLr];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
ppo [XLr];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [XLr];ctrl;[R],relax is False
[XLr];ctrl;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [XLr];ctrl;[R] contain_flag False can_relax_flag False
add ppo [XLr];ctrl;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];ctrl;[R]']
XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
ppo [XLr];ctrl;[R] index 0
[XLr];ctrl;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];ctrl;[R]
ppo [XLr];ctrl;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [XLr];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
check ppo [XLr];po;[R] True
check ppo [XLr];ctrl;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
check ppo [XLr];ctrl;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [XLr];po;[R]
ID1:candidate_ppo [XLr];ctrl;[R]
start check
check counter ppo
ppo:[XLr];po;[R] => counter_ppo:
-----------------
ppo:[XLr];ctrl;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [XLr];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
candidate_ppo: [XLr];po;[R], cur_failed_litmus_tests: [], passed? True

ID1:candidate_ppo [XLr];ctrl;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];ctrl;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
candidate_ppo: [XLr];ctrl;[R], cur_failed_litmus_tests: ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus'], passed? False

[XLr];po;[R] pass test
==== candidate ppo ====
[XLr];po;[R] [XLr];po;[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 13
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
validate: XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
synth ppo by litmus test 14
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
validate: AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]
chip: [0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; , 0:x6=0; 0:x10=2; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> sw x8, 0(x9)           | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x9)          | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x6==1)

Progress [1/1]: |█████████████████████████████████████████---------| 83.3% 100/120 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x10=1;  => 2
0:x6=0; 0:x10=2;  => 1
0:x6=1; 0:x10=1;  => 2
0:x6=1; 0:x10=2;  => 1
Time AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe  0.0948s
#Executions: 120

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
b_minus_a: {0:x6=1; 0:x10=2; }
1
strengthen,s,exe 0:x6=1; 0:x10=2;  [P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;rmw;AMO;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];rmw;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];rmw;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [AMO];rmw;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];rmw;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;po;AMO;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [AMO];po;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];po;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;po-loc;AMO;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [AMO];po-loc;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];po-loc;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;fri;AMO;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];fri;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];fri;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [AMO];fri;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];fri;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;rmw;AMO;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];rmw;[AMO];po;[W];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;rmw;AMO;po;W;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;rmw;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];rmw;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];rmw;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];rmw;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po;AMO;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[W];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po;AMO;po;W;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po;[AMO];po;[W];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po-loc;AMO;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po-loc;AMO;po;W;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po-loc;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;fri;AMO;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;fri;AMO;po;W;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];fri;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
need_check_ppo [AMO];fri;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[W];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;fri;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[W];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[W];po-loc;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), []
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), []
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	
stengthen state, 0:x6=1; 0:x10=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb65c10> [P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c2fbea80>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67c2b7b0e0>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67bfb43530>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67c05675c0>] False
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> sw x8, 0(x9)           | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x9)          | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x6==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x10=1;  => 2
0:x6=0; 0:x10=2;  => 1
0:x6=1; 0:x10=1;  => 2
0:x6=1; 0:x10=2;  => 1
Time AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe  0.0619s
#Executions: 60

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 4
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppos size: 0
candidate_ppos size: 0
candidate_ppo: [AMO];po;[W], relax is False
ID: 0 cur candidate_ppo: [AMO];po;[W],relax is False
[AMO];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [AMO];po;[W] contain_flag False can_relax_flag False
add ppo [AMO];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]', '[AMO];po;[W]']
ppo [AMO];po;[W] index 0
[AMO];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
ppo [AMO];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]}
AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
['AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [AMO];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
chip: [0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; , 0:x6=0; 0:x10=2; ]
check ppo [AMO];po;[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [AMO];po;[W]
start check
check counter ppo
ppo:[AMO];po;[W] => counter_ppo:
-----------------
ID0:candidate_ppo [AMO];po;[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
validate: AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
chip: [0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; , 0:x6=0; 0:x10=2; ]
validate: AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
chip: [0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; , 0:x6=0; 0:x10=2; ]
candidate_ppo: [AMO];po;[W], cur_failed_litmus_tests: [], passed? True

[AMO];po;[W] pass test
==== candidate ppo ====
[AMO];po;[W] [AMO];po;[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 15
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
validate: W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x8) | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;
                      | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe  0.0836s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x7=0; 1:x9=2; }
1
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;XLr
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[XLr]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[XLr]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[XLr]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[XLr]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[XLr]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb3dc10> [P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67c1312210>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x8) | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;
                      | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe  0.0404s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [W];po;[XLr], relax is False
ID: 0 cur candidate_ppo: [W];po;[XLr],relax is False
[W];po;[XLr]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[XLr] contain_flag False can_relax_flag False
add ppo [W];po;[XLr] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]', '[AMO];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]', '[AMO];po;[W]', '[W];po;[XLr]']
ppo [W];po;[XLr] index 0
[W];po;[XLr]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
ppo [W];po;[XLr]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[XLr]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
check ppo [W];po;[XLr] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];po;[XLr]
start check
check counter ppo
ppo:[W];po;[XLr] => counter_ppo:
-----------------
ID0:candidate_ppo [W];po;[XLr]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
validate: W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
validate: W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
candidate_ppo: [W];po;[XLr], cur_failed_litmus_tests: [], passed? True

[W];po;[XLr] pass test
==== candidate ppo ====
[W];po;[XLr] [W];po;[XLr] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 16
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
validate: W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x5, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)           | <0x04> sw x5, 0(x6)  ;
<0x08> ori x9, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> amoswap.w x8, x9, (x7) | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x7)          | <0x10> sw x7, 0(x8)  ;
                              | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.4sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.5sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x9=1; 0:x10=1;  => 4
1:x9=1; 0:x10=2;  => 2
1:x9=2; 0:x10=1;  => 2
1:x9=2; 0:x10=2;  => 1
Time W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe  0.5909s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {1:x9=2; 0:x10=2; }
1
strengthen,s,exe 1:x9=2; 0:x10=2;  [P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;rmw;AMO
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];rmw;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];rmw;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[AMO];rmw;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];rmw;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;po;AMO
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[AMO];po;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];po;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;po-loc;AMO
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[AMO];po-loc;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];po-loc;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;fri;AMO
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];fri;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];fri;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[AMO];fri;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];fri;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;rmw;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];rmw;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;rmw;AMO;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po;AMO;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po-loc;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po-loc;AMO;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;fri;AMO;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;fri;AMO;po-loc;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['po']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is False
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is False
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 []
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 []
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
stengthen state, 1:x9=2; 0:x10=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb8a4e0> [P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67bfb7ea50>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67bfb64230>, <src.tracesynth.synth.constraint.Constraint object at 0x7f67c0be74a0>] False
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x5, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)           | <0x04> sw x5, 0(x6)  ;
<0x08> ori x9, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> amoswap.w x8, x9, (x7) | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x7)          | <0x10> sw x7, 0(x8)  ;
                              | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x9=1; 0:x10=1;  => 4
1:x9=1; 0:x10=2;  => 2
1:x9=2; 0:x10=1;  => 2
1:x9=2; 0:x10=2;  => 1
Time W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe  0.2194s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 W;po;XLr 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 3
candidate_ppos size: 0
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [W];po;[AMO], relax is False
ID: 0 cur candidate_ppo: [W];po;[AMO],relax is False
[W];po;[AMO]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[AMO] contain_flag False can_relax_flag False
add ppo [W];po;[AMO] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]', '[AMO];po;[W]', '[W];po;[XLr]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[W];fencerel(Fence.r.r);[R]', '[R];po;[XLr]', '[XLr];po;[W]', '[RL];po;[W]', '[W];po;[AQ]', '[AMO];po;[AMO]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[XLr];po;[R]', '[AMO];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]']
ppo [W];po;[AMO] index 0
[W];po;[AMO]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
ppo [W];po;[AMO]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]}
W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
['W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[AMO]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate: W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
check ppo [W];po;[AMO] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];po;[AMO]
start check
check counter ppo
ppo:[W];po;[AMO] => counter_ppo:
-----------------
ID0:candidate_ppo [W];po;[AMO]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
validate: W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
candidate_ppo: [W];po;[AMO], cur_failed_litmus_tests: [], passed? True

[W];po;[AMO] pass test
==== candidate ppo ====
[W];po;[AMO] [W];po;[AMO] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 17
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
validate: W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]
chip: [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x6) | <0x08> fence rw, rw  ;
<0x0C> ori x8, x0, 1  | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x9)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x10, 0(x9)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\0:x7==2/\1:x9==2)

Progress [1/1]: |█-------------------------------------------------| 3.3% 100/3000 | Elapsed Time:  0.1sProgress [1/1]: |███-----------------------------------------------| 6.7% 200/3000 | Elapsed Time:  0.2sProgress [1/1]: |█████---------------------------------------------| 10.0% 300/3000 | Elapsed Time:  0.3sProgress [1/1]: |██████--------------------------------------------| 13.3% 400/3000 | Elapsed Time:  0.4sProgress [1/1]: |████████------------------------------------------| 16.7% 500/3000 | Elapsed Time:  0.4sProgress [1/1]: |██████████----------------------------------------| 20.0% 600/3000 | Elapsed Time:  0.5sProgress [1/1]: |███████████---------------------------------------| 23.3% 700/3000 | Elapsed Time:  0.6sProgress [1/1]: |█████████████-------------------------------------| 26.7% 800/3000 | Elapsed Time:  0.7sProgress [1/1]: |███████████████-----------------------------------| 30.0% 900/3000 | Elapsed Time:  0.8sProgress [1/1]: |████████████████----------------------------------| 33.3% 1000/3000 | Elapsed Time:  0.9sProgress [1/1]: |██████████████████--------------------------------| 36.7% 1100/3000 | Elapsed Time:  1.0sProgress [1/1]: |████████████████████------------------------------| 40.0% 1200/3000 | Elapsed Time:  1.1sProgress [1/1]: |█████████████████████-----------------------------| 43.3% 1300/3000 | Elapsed Time:  1.2sProgress [1/1]: |███████████████████████---------------------------| 46.7% 1400/3000 | Elapsed Time:  1.4sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 1500/3000 | Elapsed Time:  1.5sProgress [1/1]: |██████████████████████████------------------------| 53.3% 1600/3000 | Elapsed Time:  1.5sProgress [1/1]: |████████████████████████████----------------------| 56.7% 1700/3000 | Elapsed Time:  1.6sProgress [1/1]: |██████████████████████████████--------------------| 60.0% 1800/3000 | Elapsed Time:  1.6sProgress [1/1]: |███████████████████████████████-------------------| 63.3% 1900/3000 | Elapsed Time:  1.7sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 2000/3000 | Elapsed Time:  1.8sProgress [1/1]: |███████████████████████████████████---------------| 70.0% 2100/3000 | Elapsed Time:  1.9sProgress [1/1]: |████████████████████████████████████--------------| 73.3% 2200/3000 | Elapsed Time:  2.0sProgress [1/1]: |██████████████████████████████████████------------| 76.7% 2300/3000 | Elapsed Time:  2.1sProgress [1/1]: |████████████████████████████████████████----------| 80.0% 2400/3000 | Elapsed Time:  2.2sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 2500/3000 | Elapsed Time:  2.3sProgress [1/1]: |███████████████████████████████████████████-------| 86.7% 2600/3000 | Elapsed Time:  2.4sProgress [1/1]: |█████████████████████████████████████████████-----| 90.0% 2700/3000 | Elapsed Time:  2.6sProgress [1/1]: |██████████████████████████████████████████████----| 93.3% 2800/3000 | Elapsed Time:  2.7sProgress [1/1]: |████████████████████████████████████████████████--| 96.7% 2900/3000 | Elapsed Time:  2.7sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=1; 1:x9=1; 0:x10=1;  => 1
0:x7=2; 1:x9=1; 0:x10=1;  => 3
0:x7=2; 1:x9=1; 0:x10=2;  => 1
0:x7=2; 1:x9=2; 0:x10=1;  => 1
Time W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe  2.8189s
#Executions: 3000

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {0:x7=2; 1:x9=1; 0:x10=2; }
1
strengthen,s,exe 0:x7=2; 1:x9=1; 0:x10=2;  [P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
now check the paths P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
add rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];po;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
add rel final P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po-loc;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po_loc(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];po-loc;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];po-loc;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];po-loc;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];po-loc;[R]
add_rels_final
add rel final P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;rfi;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.rfi(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];rfi;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];rfi;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];rfi;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];rfi;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];rfi;[R]
need_check_ppo [W];rfi;[R] target_ppo [W];rfi;[R]
add_rels_final
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
stengthen state, 0:x7=2; 1:x9=1; 0:x10=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfb43e60> [P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67bfb7c200>] False
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x6) | <0x08> fence rw, rw  ;
<0x0C> ori x8, x0, 1  | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x9)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x10, 0(x9)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\0:x7==2/\1:x9==2)

Progress [1/1]: |█████---------------------------------------------| 10.0% 100/1000 | Elapsed Time:  0.1sProgress [1/1]: |██████████----------------------------------------| 20.0% 200/1000 | Elapsed Time:  0.1sProgress [1/1]: |███████████████-----------------------------------| 30.0% 300/1000 | Elapsed Time:  0.2sProgress [1/1]: |████████████████████------------------------------| 40.0% 400/1000 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 500/1000 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████--------------------| 60.0% 600/1000 | Elapsed Time:  0.4sProgress [1/1]: |███████████████████████████████████---------------| 70.0% 700/1000 | Elapsed Time:  0.4sProgress [1/1]: |████████████████████████████████████████----------| 80.0% 800/1000 | Elapsed Time:  0.5sProgress [1/1]: |█████████████████████████████████████████████-----| 90.0% 900/1000 | Elapsed Time:  0.6sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 6
0:x7=1; 1:x9=1; 0:x10=1;  => 2
0:x7=1; 1:x9=1; 0:x10=2;  => 1
0:x7=2; 1:x9=1; 0:x10=1;  => 4
0:x7=2; 1:x9=1; 0:x10=2;  => 2
0:x7=2; 1:x9=2; 0:x10=1;  => 2
0:x7=2; 1:x9=2; 0:x10=2;  => 1
Time W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe  0.6253s
#Executions: 1000

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 W;po;XLr 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 W;po;AMO 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 0
===== run all new tests on the validated candidate ppos =====
check these ppo
start check
check counter ppo
==== candidate ppo ====
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 18
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
validate: W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
run
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x6) | <0x08> fence rw, rw  ;
<0x0C> ori x8, x0, 1  | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x9)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x10, 0(x9)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |█-------------------------------------------------| 3.3% 100/3000 | Elapsed Time:  0.1sProgress [1/1]: |███-----------------------------------------------| 6.7% 200/3000 | Elapsed Time:  0.2sProgress [1/1]: |█████---------------------------------------------| 10.0% 300/3000 | Elapsed Time:  0.3sProgress [1/1]: |██████--------------------------------------------| 13.3% 400/3000 | Elapsed Time:  0.4sProgress [1/1]: |████████------------------------------------------| 16.7% 500/3000 | Elapsed Time:  0.4sProgress [1/1]: |██████████----------------------------------------| 20.0% 600/3000 | Elapsed Time:  0.5sProgress [1/1]: |███████████---------------------------------------| 23.3% 700/3000 | Elapsed Time:  0.6sProgress [1/1]: |█████████████-------------------------------------| 26.7% 800/3000 | Elapsed Time:  0.7sProgress [1/1]: |███████████████-----------------------------------| 30.0% 900/3000 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 1000/3000 | Elapsed Time:  0.9sProgress [1/1]: |██████████████████--------------------------------| 36.7% 1100/3000 | Elapsed Time:  0.9sProgress [1/1]: |████████████████████------------------------------| 40.0% 1200/3000 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████-----------------------------| 43.3% 1300/3000 | Elapsed Time:  1.2sProgress [1/1]: |███████████████████████---------------------------| 46.7% 1400/3000 | Elapsed Time:  1.3sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 1500/3000 | Elapsed Time:  1.4sProgress [1/1]: |██████████████████████████------------------------| 53.3% 1600/3000 | Elapsed Time:  1.5sProgress [1/1]: |████████████████████████████----------------------| 56.7% 1700/3000 | Elapsed Time:  1.5sProgress [1/1]: |██████████████████████████████--------------------| 60.0% 1800/3000 | Elapsed Time:  1.6sProgress [1/1]: |███████████████████████████████-------------------| 63.3% 1900/3000 | Elapsed Time:  1.7sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 2000/3000 | Elapsed Time:  1.8sProgress [1/1]: |███████████████████████████████████---------------| 70.0% 2100/3000 | Elapsed Time:  1.9sProgress [1/1]: |████████████████████████████████████--------------| 73.3% 2200/3000 | Elapsed Time:  1.9sProgress [1/1]: |██████████████████████████████████████------------| 76.7% 2300/3000 | Elapsed Time:  2.0sProgress [1/1]: |████████████████████████████████████████----------| 80.0% 2400/3000 | Elapsed Time:  2.1sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 2500/3000 | Elapsed Time:  2.2sProgress [1/1]: |███████████████████████████████████████████-------| 86.7% 2600/3000 | Elapsed Time:  2.3sProgress [1/1]: |█████████████████████████████████████████████-----| 90.0% 2700/3000 | Elapsed Time:  2.5sProgress [1/1]: |██████████████████████████████████████████████----| 93.3% 2800/3000 | Elapsed Time:  2.6sProgress [1/1]: |████████████████████████████████████████████████--| 96.7% 2900/3000 | Elapsed Time:  2.6sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x9=1; 0:x10=1;  => 4
1:x9=1; 0:x10=2;  => 1
1:x9=2; 0:x10=1;  => 1
Time W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe  2.7110s
#Executions: 3000

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
b_minus_a: {1:x9=1; 0:x10=2; }
1
strengthen,s,exe 1:x9=1; 0:x10=2;  [P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
now check the paths P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]
[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
add rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];po;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
ei,ej,relations, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
(P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po'), (P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po-loc;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];rfi;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[XLr];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];rfi;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
add rel final P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po-loc;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po_loc(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];po-loc;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];po-loc;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	(W), P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];po-loc;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];po-loc;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];po-loc;[R]
add_rels_final
add rel final P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po', 'po_loc']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
from this path get ppo
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;rfi;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.rfi(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, 'rfi')]]
need_check_ppo [W];po;[XLr] target_ppo [W];rfi;[R]
need_check_ppo [W];po-loc;[XLr] target_ppo [W];rfi;[R]
need_check_ppo [W];rfi;[XLr] target_ppo [W];rfi;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc', 'rfi']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'rfi')]]
need_check_ppo [W];po;[R] target_ppo [W];rfi;[R]
need_check_ppo [W];po-loc;[R] target_ppo [W];rfi;[R]
need_check_ppo [W];rfi;[R] target_ppo [W];rfi;[R]
add_rels_final
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 True False ['po', 'po_loc', 'rfi']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc', 'rfi']
stengthen state, 1:x9=1; 0:x10=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7f67bfbaea20> [P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x14>	lw x10_p0_1, 0(x9_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7f67bfb3e300>] False
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x6) | <0x08> fence rw, rw  ;
<0x0C> ori x8, x0, 1  | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x9)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x10, 0(x9)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |█████---------------------------------------------| 10.0% 100/1000 | Elapsed Time:  0.1sProgress [1/1]: |██████████----------------------------------------| 20.0% 200/1000 | Elapsed Time:  0.1sProgress [1/1]: |███████████████-----------------------------------| 30.0% 300/1000 | Elapsed Time:  0.2sProgress [1/1]: |████████████████████------------------------------| 40.0% 400/1000 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 500/1000 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████--------------------| 60.0% 600/1000 | Elapsed Time:  0.4sProgress [1/1]: |███████████████████████████████████---------------| 70.0% 700/1000 | Elapsed Time:  0.4sProgress [1/1]: |████████████████████████████████████████----------| 80.0% 800/1000 | Elapsed Time:  0.5sProgress [1/1]: |█████████████████████████████████████████████-----| 90.0% 900/1000 | Elapsed Time:  0.5sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x9=1; 0:x10=1;  => 6
1:x9=1; 0:x10=2;  => 3
1:x9=2; 0:x10=1;  => 2
1:x9=2; 0:x10=2;  => 1
Time W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe  0.6066s
#Executions: 1000

complete exe list
get new mm
uninit_func_list
ppo_candidate_func51 R;fence_r_w;R 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_w_rw;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 R;fence_rw_r;W 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_r_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;R 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 R;fence_w_rw;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 W;fence_r_r;W 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 W;fence_w_r;W 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 W;po;XLr 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 W;po;AMO 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
new_mm start
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 0
===== run all new tests on the validated candidate ppos =====
check these ppo
start check
check counter ppo
==== candidate ppo ====
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
iterate 1 final validate:
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array final start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[R];po;[XLr]
[XLr];po;[W]
[RL];po;[W]
[W];po;[AQ]
[AMO];po;[AMO]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
check cat arrat final end
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
validate: R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
validate: R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
chip: [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
validate: W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
validate: W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
chip: [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
herd: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
chip: [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
validate: AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
herd: [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
chip: [0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; , 0:x6=0; 0:x10=2; ]
validate: W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
herd: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
chip: [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
validate: W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
validate: W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe
herd: [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]
chip: [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
validate: W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe
herd: [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
chip: [1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]
failed: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus
final validate False
failed_litmus_tests ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus', '/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_rfi_XLr_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus', '/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_C910/W_po_loc_XLr_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe.litmus']
The maximum number of iterations exceeded
[('ppo_candidate_func0', 'R;fence_r_w;R', '\ndef ppo_candidate_func0(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func1', 'R;fence_w_rw;R', '\ndef ppo_candidate_func1(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func2', 'R;fence_rw_r;W', '\ndef ppo_candidate_func2(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func3', 'R;fence_r_r;W', '\ndef ppo_candidate_func3(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func4', 'R;fence_w_r;W', '\ndef ppo_candidate_func4(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func5', 'W;fence_r_w;R', '\ndef ppo_candidate_func5(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func6', 'R;fence_w_rw;W', '\ndef ppo_candidate_func6(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func7', 'W;fence_rw_r;W', '\ndef ppo_candidate_func7(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func8', 'W;fence_r_w;W', '\ndef ppo_candidate_func8(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func9', 'W;fence_r_r;W', '\ndef ppo_candidate_func9(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func10', 'W;fence_w_r;W', '\ndef ppo_candidate_func10(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func11', 'XLr;po;R', '\ndef ppo_candidate_func11(ra, e1: Event, e2: Event) -> bool:\n    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func12', 'AMO;po;W', '\ndef ppo_candidate_func12(ra, e1: Event, e2: Event) -> bool:\n    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func13', 'W;po;XLr', '\ndef ppo_candidate_func13(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func14', 'W;po;AMO', '\ndef ppo_candidate_func14(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)\n', <PPOInitFlag.Verified: 3>)]
ppo_list
[R];po;[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.w.r);[W]
[XLr];po;[R]
[XLr];ctrl;[R]
[AMO];po;[W]
[W];po;[XLr]
[W];po;[AMO]
