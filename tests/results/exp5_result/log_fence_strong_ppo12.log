now is the 1 iteration
synth ppo by litmus test 0
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rws': [0:x7=0; 1:x7=0; , 0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
SB+fence.r.rws
[0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]
[0:x7=0; 1:x7=0; , 0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]
['SB+fence.r.rws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/SB+fence.r.rws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence r, rw  ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.r.rws  0.0206s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence r, rw  ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x7=0;  => 1
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.r.rws  0.0183s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/SB+fence.r.rws.litmus
strengthen,s,exe 0:x7=0; 1:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
now check the paths P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation fre
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];po;[R];fre
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];po;[R];fre
diy_cycle PodWR Fre PodWR Fre
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_rw;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.r.rw);[R]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation fre
path_single_ppo [W];fencerel(Fence.r.rw);[R]
other_single_ppo fre;[W];po;[R];fre
path_single_ppo justify [W];fencerel(Fence.r.rw);[R]
other_single_ppo justify fre;[W];po;[R];fre
diy_cycle Fence.r.rwdWR Fre PodWR Fre
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
now check the paths P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation fre
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];po;[R];fre
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];po;[R];fre
diy_cycle PodWR Fre PodWR Fre
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_r_rw;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_rw')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.r.rw);[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation fre
path_single_ppo [W];fencerel(Fence.r.rw);[R]
other_single_ppo fre;[W];po;[R];fre
path_single_ppo justify [W];fencerel(Fence.r.rw);[R]
other_single_ppo justify fre;[W];po;[R];fre
diy_cycle Fence.r.rwdWR Fre PodWR Fre
stengthen state, 0:x7=0; 1:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a18206e0> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1318d40>, <src.tracesynth.synth.constraint.Constraint object at 0x7034a1241dc0>] False
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence r, rw  ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x7=0;  => 1
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.r.rws  0.0190s
#Executions: 18

complete exe list
get new mm
uninit_func_list
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 2
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.rw);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '([W];po;[R])\\([AMO];po-loc;[R])']
ppo [W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_PodWR_Fre_PodWR_Fre.litmus PodWR Fre PodWR Fre
[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
([W];po;[R])\([AMO];po-loc;[R])
ppo [W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.rw);[R],relax is False
[W];fencerel(Fence.r.rw);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.rw);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.rw);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]']
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
W_po_R_PodWR_Fre_PodWR_Fre.litmus.litmus
ppo [W];fencerel(Fence.r.rw);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_PodWR_Fre.litmus Fence.r.rwdWR Fre PodWR Fre
[W];fencerel(Fence.r.rw);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
ppo [W];fencerel(Fence.r.rw);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[R] False
check ppo [W];fencerel(Fence.r.rw);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.rw);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.rw);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/SB+fence.r.rws.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.rw);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.rw);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.rw);[R] [W];fencerel(Fence.r.rw);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/SB+fence.r.rws.litmus
synth ppo by litmus test 1
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
MP+fence.rw.ws
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]
['MP+fence.rw.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.ws  0.0146s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.ws  0.0146s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.ws.litmus
strengthen,s,exe 1:x5=1; 1:x7=0;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_rw_w;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.rw.w);[R]
need_check_ppo [R];fencerel(Fence.rw.w);[R] target_ppo [R];fencerel(Fence.rw.w);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.rw.w);[R]
need_check_ppo [R];fencerel(Fence.rw.w);[R] target_ppo [R];fencerel(Fence.rw.w);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	]]
ppo [R];fencerel(Fence.rw.w);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.rw.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.rw.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.rw.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a1214bf0> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a13a9910>] False
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.ws  0.0115s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.rw.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '([R];po\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])']
ppo [R];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRR Fre Fence.rw.rwdWW Rfe
[R];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
([R];po\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
ppo [R];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [R];fencerel(Fence.rw.w);[R],relax is False
[R];fencerel(Fence.rw.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.rw.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.rw.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
ppo [R];fencerel(Fence.rw.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.rw.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.rw.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
ppo [R];fencerel(Fence.rw.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R] False
check ppo [R];fencerel(Fence.rw.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.rw.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.rw.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.rw.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.rw.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.ws.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.rw.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.rw.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.rw.w);[R] [R];fencerel(Fence.rw.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.ws.litmus
synth ppo by litmus test 2
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.rw.ws
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.rw.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/R+fence.rw.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.ws  0.0177s
#Executions: 24

validate litmus by cur_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.ws  0.0164s
#Executions: 24

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/R+fence.rw.ws.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
now check the paths P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_rw_w;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.rw.w);[R]
need_check_ppo [W];fencerel(Fence.rw.w);[R] target_ppo [W];fencerel(Fence.rw.w);[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.rw.w);[R]
need_check_ppo [W];fencerel(Fence.rw.w);[R] target_ppo [W];fencerel(Fence.rw.w);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.rw.w);[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.rw.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.rw.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.rw.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a110d8e0> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a12d9250>] False
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.ws  0.0128s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.rw.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.rw.w);[R],relax is False
[W];fencerel(Fence.rw.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.rw.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.rw.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]']
ppo [W];fencerel(Fence.rw.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.rw.wdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.rw.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
ppo [W];fencerel(Fence.rw.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.rw.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.rw.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.rw.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.rw.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.rw.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/R+fence.rw.ws.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.rw.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.rw.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.rw.w);[R] [W];fencerel(Fence.rw.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/R+fence.rw.ws.litmus
synth ppo by litmus test 3
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 4
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; , [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
2+2W+fence.r.rw+fence.rw.rw
[[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]
[[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; , [x]=2; [y]=2; ]
['2+2W+fence.r.rw+fence.rw.rw']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0103s
#Executions: 24

validate litmus by cur_mm
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
[x]=2; [y]=2;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0102s
#Executions: 24

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
strengthen,s,exe [x]=2; [y]=2;  [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
now check the paths P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
check all rels
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_rw;W
all_rels
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.rw);[W]
need_check_ppo [W];fencerel(Fence.r.rw);[W] target_ppo [W];fencerel(Fence.r.rw);[W]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
check all rels
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.rw);[W]
need_check_ppo [W];fencerel(Fence.r.rw);[W] target_ppo [W];fencerel(Fence.r.rw);[W]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]
{}
filter_cycle [[P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.rw);[W]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.rw);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.rw);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rwdWW Coe Fence.rw.rwdWW Coe
stengthen state, [x]=2; [y]=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a1892420> [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a12d94f0>] False
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
[x]=2; [y]=2;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0099s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.rw);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];po;[W]']
ppo [W];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus PodWW Coe Fence.rw.rwdWW Coe
[W];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];po;[W]
ppo [W];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe']
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.rw);[W],relax is False
[W];fencerel(Fence.r.rw);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.rw);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.rw);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]']
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus.litmus
ppo [W];fencerel(Fence.r.rw);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.rwdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.rw);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
ppo [W];fencerel(Fence.r.rw);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[W] False
check ppo [W];fencerel(Fence.r.rw);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.rw);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.rw);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.rw);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.rw);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.rw);[W] [W];fencerel(Fence.r.rw);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
synth ppo by litmus test 5
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; , 1:x5=1; [x]=2; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
S+fence.rw.rw+fence.w.w
[1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]
[1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; , 1:x5=1; [x]=2; ]
['S+fence.rw.rw+fence.w.w']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/S+fence.rw.rw+fence.w.w.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=2; 0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence w, w   ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; [x]=1;  => 1
1:x5=0; [x]=2;  => 1
1:x5=1; [x]=1;  => 1
Time S+fence.rw.rw+fence.w.w  0.0154s
#Executions: 24

validate litmus by cur_mm
{0:x5=2; 0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence w, w   ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; [x]=1;  => 1
1:x5=0; [x]=2;  => 1
1:x5=1; [x]=1;  => 1
1:x5=1; [x]=2;  => 1
Time S+fence.rw.rw+fence.w.w  0.0152s
#Executions: 24

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/S+fence.rw.rw+fence.w.w.litmus
strengthen,s,exe 1:x5=1; [x]=2;  [P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
check all rels
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[W]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
cycle str
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True
candidate_add_ppo R;fence_w_w;W
all_rels
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.w);[W]
need_check_ppo [R];fencerel(Fence.w.w);[W] target_ppo [R];fencerel(Fence.w.w);[W]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
check all rels
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.w);[W]
need_check_ppo [R];fencerel(Fence.w.w);[W] target_ppo [R];fencerel(Fence.w.w);[W]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_w_w')]
{}
filter_cycle [[P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];fencerel(Fence.w.w);[W]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
cycle str
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.w);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.w);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.wdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; [x]=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a181f8f0> [P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a110f2f0>] False
{0:x5=2; 0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence w, w   ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; [x]=1;  => 1
1:x5=0; [x]=2;  => 1
1:x5=1; [x]=1;  => 1
1:x5=1; [x]=2;  => 1
Time S+fence.rw.rw+fence.w.w  0.0124s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.w);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];po;[W]']
ppo [R];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus PodRW Coe Fence.rw.rwdWW Rfe
[R];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];po;[W]
ppo [R];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.w);[W],relax is False
[R];fencerel(Fence.w.w);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.w);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.w);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]']
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus.litmus
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
ppo [R];fencerel(Fence.w.w);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.w.wdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.w);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
ppo [R];fencerel(Fence.w.w);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W] False
check ppo [R];fencerel(Fence.w.w);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.w);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.w);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.w);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.w);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/S+fence.rw.rw+fence.w.w.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.w);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.w);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.w);[W] [R];fencerel(Fence.w.w);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/S+fence.rw.rw+fence.w.w.litmus
synth ppo by litmus test 6
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0182s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0178s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_r_w;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.r.w);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0d23860> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a18e3980>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0140s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.r.w);[R],relax is False
[R];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]']
ppo [R];fencerel(Fence.r.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.r.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
ppo [R];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.w);[R] [R];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 7
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 8
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 9
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 10
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 11
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 12
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 13
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 14
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 15
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 16
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 17
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 18
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 19
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
MP+fence.w.ws
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]
['MP+fence.w.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0178s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0177s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
strengthen,s,exe 1:x5=1; 1:x7=0;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_w_w;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.w);[R]
need_check_ppo [R];fencerel(Fence.w.w);[R] target_ppo [R];fencerel(Fence.w.w);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.w);[R]
need_check_ppo [R];fencerel(Fence.w.w);[R] target_ppo [R];fencerel(Fence.w.w);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	]]
ppo [R];fencerel(Fence.w.w);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a114d5b0> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1d20ec0>] False
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0134s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.w);[R],relax is False
[R];fencerel(Fence.w.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]']
ppo [R];fencerel(Fence.w.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
ppo [R];fencerel(Fence.w.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.w);[R] [R];fencerel(Fence.w.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
synth ppo by litmus test 20
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 21
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0185s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0183s
#Executions: 18

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_w_rw;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.w.rw);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0d2af60> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a181ca70>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0143s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.rw);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.rw);[R],relax is False
[R];fencerel(Fence.w.rw);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]']
ppo [R];fencerel(Fence.w.rw);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.rwdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.rw);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
ppo [R];fencerel(Fence.w.rw);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.rw);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.rw);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[R] [R];fencerel(Fence.w.rw);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 22
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.w.ws
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.w.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0212s
#Executions: 24

validate litmus by cur_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0183s
#Executions: 24

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
now check the paths P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];po;[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_w_w;R
all_rels
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.w.w);[R]
need_check_ppo [W];fencerel(Fence.w.w);[R] target_ppo [W];fencerel(Fence.w.w);[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.w.w);[R]
need_check_ppo [W];fencerel(Fence.w.w);[R] target_ppo [W];fencerel(Fence.w.w);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
{}
filter_cycle [[P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.w.w);[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.w.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.w.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.w.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a12515e0> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a0d09460>] False
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0143s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.w.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.w.w);[R],relax is False
[W];fencerel(Fence.w.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.w.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.w.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]']
ppo [W];fencerel(Fence.w.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.w.wdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.w.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
ppo [W];fencerel(Fence.w.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.w.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.w.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.w.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.w.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.w.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.w.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.w.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.w.w);[R] [W];fencerel(Fence.w.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
synth ppo by litmus test 23
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 24
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 25
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 26
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 27
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 28
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 29
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 30
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 31
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 32
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 33
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 34
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 35
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=0; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
MP+fence.rw.rw+ctrlfence.w.r
[1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]
[1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=0; , 1:x5=1; 1:x9=1; ]
['MP+fence.rw.rw+ctrlfence.w.r']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0295s
#Executions: 36

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=0;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0312s
#Executions: 36

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
strengthen,s,exe 1:x5=1; 1:x9=0;  [P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;ctrl;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.ctrl(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];ctrl;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];ctrl;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')]
{}
filter_cycle [[P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];ctrl;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];ctrl;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];ctrl;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpCtrldR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_w_r;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];fencerel(Fence.w.r);[R] target_ppo [R];fencerel(Fence.w.r);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];fencerel(Fence.w.r);[R] target_ppo [R];fencerel(Fence.w.r);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];fencerel(Fence.w.r);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.r);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.r);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x9=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a118d400> [P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a12d88c0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=0;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0265s
#Executions: 18

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 3
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];ctrl;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.r);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];ctrl;[R],relax is False
[R];ctrl;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];ctrl;[R] contain_flag False can_relax_flag False
add ppo [R];ctrl;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];ctrl;[R]']
ppo [R];ctrl;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus DpCtrldR Fre Fence.rw.rwdWW Rfe
[R];ctrl;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];ctrl;[R]
ppo [R];ctrl;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe']
ID: 2 cur candidate_ppo: [R];fencerel(Fence.w.r);[R],relax is False
[R];fencerel(Fence.w.r);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.r);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.r);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]']
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
ppo [R];fencerel(Fence.w.r);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.rdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.r);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
ppo [R];fencerel(Fence.w.r);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];ctrl;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];ctrl;[R] False
check ppo [R];fencerel(Fence.w.r);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.r);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.r);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.r);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.r);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.r);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.r);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.r);[R] [R];fencerel(Fence.w.r);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
synth ppo by litmus test 36
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 37
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 38
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 39
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 40
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 41
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 42
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 43
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 44
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.w.w+fence.tso
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.w.w+fence.tso']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0192s
#Executions: 24

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0174s
#Executions: 24

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
now check the paths P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]
from this path get ppo
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_tso;R
all_rels
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.tso);[R]
need_check_ppo [W];fencerel(Fence.tso);[R] target_ppo [W];fencerel(Fence.tso);[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
check all rels
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.tso);[R]
need_check_ppo [W];fencerel(Fence.tso);[R] target_ppo [W];fencerel(Fence.tso);[R]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.tso);[R]
e1 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.tso);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.tso);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.tsodWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0dd5af0> [P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a133ade0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0140s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.tso);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.tso);[R],relax is False
[W];fencerel(Fence.tso);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.tso);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.tso);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]']
ppo [W];fencerel(Fence.tso);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.tsodWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.tso);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
ppo [W];fencerel(Fence.tso);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.tso);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.tso);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.tso);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.tso);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.tso);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.tso);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.tso);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.tso);[R] [W];fencerel(Fence.tso);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
synth ppo by litmus test 45
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 46
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 47
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 48
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
[]
synth ppo by litmus test 49
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 50
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 51
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 52
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 53
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 54
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0643s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0667s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.w.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0c109e0> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a17f5ca0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0404s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.r);[W],relax is False
[R];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]']
ppo [R];fencerel(Fence.w.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.w.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
ppo [R];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.r);[W] [R];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 55
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x9=1;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.0722s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.0725s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_r;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.r);[R]
need_check_ppo [W];fencerel(Fence.r.r);[R] target_ppo [W];fencerel(Fence.r.r);[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.r);[R]
need_check_ppo [W];fencerel(Fence.r.r);[R] target_ppo [W];fencerel(Fence.r.r);[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.r.r);[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.r);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.r);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rdWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a114f4d0> [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a0d2ac60>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.0292s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.r);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.r);[R],relax is False
[W];fencerel(Fence.r.r);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.r);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.r);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]']
ppo [W];fencerel(Fence.r.r);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.r.rdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.r);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
ppo [W];fencerel(Fence.r.r);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.r);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.r);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.r);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.r);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.r);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.r);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.r);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.r);[R] [W];fencerel(Fence.r.r);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 56
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 57
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.0662s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.0687s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_rw;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.w.rw);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a18cf410> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1d22c30>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.0417s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.rw);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.rw);[W],relax is False
[R];fencerel(Fence.w.rw);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]']
ppo [R];fencerel(Fence.w.rw);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.w.rwdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.rw);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
ppo [R];fencerel(Fence.w.rw);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.rw);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.rw);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[W] [R];fencerel(Fence.w.rw);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 58
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0654s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0688s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_r_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.r.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a18220f0> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1287c20>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0317s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.r.r);[W],relax is False
[R];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]']
ppo [R];fencerel(Fence.r.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.r.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
ppo [R];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.r);[W] [R];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 59
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x9=1;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0734s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0719s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_w;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.r.w);[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0dd66f0> [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1253530>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0291s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.w);[R],relax is False
[W];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]']
ppo [W];fencerel(Fence.r.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.r.wdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
ppo [W];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[R] [W];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 60
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 61
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0640s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0669s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_rw_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.rw.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.rw.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0c11d00> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a19e63c0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0303s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.rw.r);[W],relax is False
[R];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]']
ppo [R];fencerel(Fence.rw.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.rw.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
ppo [R];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.rw.r);[W] [R];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 62
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 63
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 64
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]
['R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1744s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=0;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1737s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x11=0;  [P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo R;addr;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];addr;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];addr;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];addr;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];addr;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];addr;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo R;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
now check the paths P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
from this path get ppo
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
start_relation fre
end relation addr
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];addr
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];addr
diy_cycle DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x11=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0c58e90> [P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a12befc0>, <src.tracesynth.synth.constraint.Constraint object at 0x7034a118fcb0>] False
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=0;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0590s
#Executions: 24

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 3
candidate_ppos size: 1
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [R];po;[W];po;[R], relax is False
candidate_ppo: [R];addr;[W];po;[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 2 cur candidate_ppo: [R];po;[W];po;[R],relax is False
[R];po;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[W];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];po;[W];po\\(po-loc;[W];po-loc);[R]']
ppo [R];po;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRW PodWR Fre Fence.rw.rwdWW Rfe
[R];po;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];po;[W];po\(po-loc;[W];po-loc);[R]
ppo [R];po;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
ID: 3 cur candidate_ppo: [R];addr;[W];po;[R],relax is False
[R];addr;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];addr;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];addr;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]']
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
ppo [R];addr;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
[R];addr;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
ppo [R];addr;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]
['R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W];po;[R] False
check ppo [R];addr;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
check ppo [R];addr;[W];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];addr;[W];po;[R]
start check
check counter ppo
ppo:[R];addr;[W];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];addr;[W];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
candidate_ppo: [R];addr;[W];po;[R], cur_failed_litmus_tests: [], passed? True

[R];addr;[W];po;[R] pass test
==== candidate ppo ====
[R];addr;[W];po;[R] [R];addr;[W];po;[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 65
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
['R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1723s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=0;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1674s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=0;  [P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo R;data;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];data;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];data;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];data;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];data;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];data;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo R;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
now check the paths P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
from this path get ppo
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[R]
e1 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
start_relation fre
end relation data
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];data
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];data
diy_cycle DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0c86720> [P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a1948aa0>, <src.tracesynth.synth.constraint.Constraint object at 0x7034a191bf20>] False
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=0;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0573s
#Executions: 24

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;addr;W;po;R 
def ppo_candidate_func55(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 3
candidate_ppos size: 1
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [R];po;[W];po;[R], relax is False
candidate_ppo: [R];data;[W];po;[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 2 cur candidate_ppo: [R];po;[W];po;[R],relax is False
[R];po;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[W];po;[R] PPOValidFlag.Invalid
ID: 3 cur candidate_ppo: [R];data;[W];po;[R],relax is False
[R];data;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];data;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];data;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]']
ppo [R];data;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
[R];data;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
ppo [R];data;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];data;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];data;[W];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];data;[W];po;[R]
start check
check counter ppo
ppo:[R];data;[W];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];data;[W];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];data;[W];po;[R], cur_failed_litmus_tests: [], passed? True

[R];data;[W];po;[R] pass test
==== candidate ppo ====
[R];data;[W];po;[R] [R];data;[W];po;[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 66
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 67
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
now_herd_logs_ppo_remove {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
[]
synth ppo by litmus test 68
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.4sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4721s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4351s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_w_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];fencerel(Fence.w.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.w.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0ccc6b0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a19489e0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.0692s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;addr;W;po;R 
def ppo_candidate_func55(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func56 R;data;W;po;R 
def ppo_candidate_func56(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.w.r);[W],relax is False
[W];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]']
ppo [W];fencerel(Fence.w.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.w.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
ppo [W];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.w.r);[W] [W];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 69
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
[]
synth ppo by litmus test 70
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.4sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4457s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4377s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.r.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0ce93d0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a0c10d10>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.1317s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;addr;W;po;R 
def ppo_candidate_func55(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func56 R;data;W;po;R 
def ppo_candidate_func56(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func57 W;fence_w_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.r);[W],relax is False
[W];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[W]']
ppo [W];fencerel(Fence.r.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
ppo [W];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.r);[W] [W];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 71
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.4sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.4627s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.4sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.4406s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_w;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.w);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0b15550> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a12bf230>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.1327s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;addr;W;po;R 
def ppo_candidate_func55(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func56 R;data;W;po;R 
def ppo_candidate_func56(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func57 W;fence_w_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_r_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.w);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.w);[W],relax is False
[W];fencerel(Fence.r.w);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[W]']
ppo [W];fencerel(Fence.r.w);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.wdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.w);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
ppo [W];fencerel(Fence.r.w);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.w);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.w);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[W] [W];fencerel(Fence.r.w);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 72
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
synth ppo by litmus test 73
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4372s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.1sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.1sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  0.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4327s
#Executions: 600

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_rw_r;W
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.rw.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.rw.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x7034a0b2c260> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x7034a0c12510>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.0647s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;R 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 W;fence_rw_w;R 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_r_rw;W 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;W 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 R;fence_r_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 R;fence_w_w;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_w_rw;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 W;fence_w_w;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_r;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_r;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 W;fence_r_r;R 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_w_rw;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 R;fence_r_r;W 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 R;addr;W;po;R 
def ppo_candidate_func55(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func56 R;data;W;po;R 
def ppo_candidate_func56(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
ppo_candidate_func57 W;fence_w_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_r_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 W;fence_r_w;W 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.rw.r);[W],relax is False
[W];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.rw.w);[R]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.w.w);[W]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.w.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.rw.r);[W]']
ppo [W];fencerel(Fence.rw.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.rw.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
ppo [W];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.rw.r);[W] [W];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 74
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 75
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 76
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 77
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 78
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 79
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 80
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
[]
synth ppo by litmus test 81
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 82
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 83
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 84
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 85
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 86
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
synth ppo by litmus test 87
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 88
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 89
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 90
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
[]
synth ppo by litmus test 91
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 92
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 93
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 94
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 95
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 96
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 97
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 98
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
[]
synth ppo by litmus test 99
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 100
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 101
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 102
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
synth ppo by litmus test 103
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 104
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 105
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 106
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 107
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 108
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 109
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 110
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 111
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 112
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 113
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 114
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
synth ppo by litmus test 115
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
iterate 1 final validate:
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array final start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.rw.w);[R]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.w.w);[W]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.w.w);[R]
[R];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.rw.r);[W]
check cat arrat final end
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
now_herd_logs_ppo_remove {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/fence_strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
final validate True
failed_litmus_tests []
[('ppo_candidate_func0', 'W;fence_r_rw;R', '\ndef ppo_candidate_func0(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func1', 'R;fence_rw_w;R', '\ndef ppo_candidate_func1(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func2', 'W;fence_rw_w;R', '\ndef ppo_candidate_func2(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func3', 'W;fence_r_rw;W', '\ndef ppo_candidate_func3(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func4', 'R;fence_w_w;W', '\ndef ppo_candidate_func4(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func5', 'R;fence_r_w;R', '\ndef ppo_candidate_func5(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func6', 'R;fence_w_w;R', '\ndef ppo_candidate_func6(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func7', 'R;fence_w_rw;R', '\ndef ppo_candidate_func7(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func8', 'W;fence_w_w;R', '\ndef ppo_candidate_func8(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func9', 'R;fence_w_r;R', '\ndef ppo_candidate_func9(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func10', 'W;fence_tso;R', '\ndef ppo_candidate_func10(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func11', 'R;fence_w_r;W', '\ndef ppo_candidate_func11(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func12', 'W;fence_r_r;R', '\ndef ppo_candidate_func12(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func13', 'R;fence_w_rw;W', '\ndef ppo_candidate_func13(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func14', 'R;fence_r_r;W', '\ndef ppo_candidate_func14(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func15', 'W;fence_r_w;R', '\ndef ppo_candidate_func15(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func16', 'R;fence_rw_r;W', '\ndef ppo_candidate_func16(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func17', 'R;addr;W;po;R', '\ndef ppo_candidate_func17(ra, e1: Event, e3) -> bool:\n    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])\n# ', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func18', 'R;data;W;po;R', '\ndef ppo_candidate_func18(ra, e1: Event, e3) -> bool:\n    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])\n# ', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func19', 'W;fence_w_r;W', '\ndef ppo_candidate_func19(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func20', 'W;fence_r_r;W', '\ndef ppo_candidate_func20(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func21', 'W;fence_r_w;W', '\ndef ppo_candidate_func21(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func22', 'W;fence_rw_r;W', '\ndef ppo_candidate_func22(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>)]
ppo_list
[W];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];po;[R]
[R];fencerel(Fence.rw.w);[R]
[R];po;[W]
[R];fencerel(Fence.w.w);[W]
[W];po;[R]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];ctrl;[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];po;[W];po;[R]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po;[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[XSc];po;[R]
[XSc];fencerel(Fence.r.r);[R]
[W];po;[AMO]
[XSc];po;[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.rw.r);[W]
