now is the 1 iteration
synth ppo by litmus test 0
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]
['R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.2008s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=0;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1851s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x11=0;  [P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo R;addr;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];addr;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];addr;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	]]
ppo [R];addr;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];addr;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];addr;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo R;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	]]
ppo [R];po;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), ['addr', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po')
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'addr'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, 'po'), (P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [R];addr;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
now check the paths P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
from this path get ppo
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 True True ['coe']
check rel --: None P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 False True ['addr', 'po']
check rel P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, is write event:True
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, is write event:False
ei,ej,relations, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	(W), P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	(R), ['po']
this path is True
(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	, P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
e2 P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	
P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
start_relation fre
end relation addr
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];addr
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];addr
diy_cycle DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x11=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x70349c4f3260> [P0: <0x14>	lw x11_p0_1, 0(x12_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x8_p0_1, 0(x10_p0_1)	] [<src.tracesynth.synth.constraint.Constraint object at 0x70349c98b980>, <src.tracesynth.synth.constraint.Constraint object at 0x70349e922990>] False
{0:x6=x; 0:x9=y; 0:x12=z; 1:x6=z; 1:x8=x}
          P0           |         P1           ;
<0x00> lw x5, 0(x6)    | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5  | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1   | <0x08> fence rw, rw  ;
<0x0C> add x10, x9, x7 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x8, 0(x10)   | <0x10> sw x7, 0(x8)  ;
<0x14> lw x11, 0(x12)  |                      ;

QType.Exists (0:x5==1/\0:x11==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x11=0;  => 1
0:x5=0; 0:x11=1;  => 1
0:x5=1; 0:x11=0;  => 1
0:x5=1; 0:x11=1;  => 1
Time R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0658s
#Executions: 24

complete exe list
get new mm
uninit_func_list
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 3
candidate_ppos size: 1
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [R];po;[W];po;[R], relax is False
candidate_ppo: [R];addr;[W];po;[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '([R];po\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])']
ppo [R];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRR Fre Fence.rw.rwdWW Rfe
[R];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
([R];po\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
ppo [R];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '([W];po;[R])\\([AMO];po-loc;[R])']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
ppo [W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
([W];po;[R])\([AMO];po-loc;[R])
ppo [W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
ID: 2 cur candidate_ppo: [R];po;[W];po;[R],relax is False
[R];po;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[W];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[R];po;[W];po\\(po-loc;[W];po-loc);[R]']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
ppo [R];po;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRW PodWR Fre Fence.rw.rwdWW Rfe
[R];po;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];po;[W];po\(po-loc;[W];po-loc);[R]
ppo [R];po;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
ID: 3 cur candidate_ppo: [R];addr;[W];po;[R],relax is False
[R];addr;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];addr;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];addr;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[R];addr;[W];po;[R]']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
ppo [R];addr;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus DpAddrdW PodWR Fre Fence.rw.rwdWW Rfe
[R];addr;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
ppo [R];addr;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]
[0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]
['R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R] False
check ppo [W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[R] False
check ppo [R];po;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W];po;[R] False
check ppo [R];addr;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
check ppo [R];addr;[W];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];addr;[W];po;[R]
start check
check counter ppo
ppo:[R];addr;[W];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];addr;[W];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
candidate_ppo: [R];addr;[W];po;[R], cur_failed_litmus_tests: [], passed? True

[R];addr;[W];po;[R] pass test
==== candidate ppo ====
[R];addr;[W];po;[R] [R];addr;[W];po;[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 1
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
['R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1838s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=0;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.1738s
#Executions: 96

failed file: /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=0;  [P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo R;data;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];data;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];data;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];data;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];data;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];data;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo R;po;W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[W];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[W];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[W];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), ['data', 'po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po')
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'data'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, 'po'), (P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [R];data;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[W];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
now check the paths P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
from this path get ppo
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 False True ['data', 'po']
check rel P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, is write event:True
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	(W), P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
e2 P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	
P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
start_relation fre
end relation data
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];data
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe;[R];data
diy_cycle DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=0;  <src.tracesynth.analysis.rel.GlobalRelationAnalyzer object at 0x70349dbc0fb0> [P0: <0x10>	lw x9_p0_1, 0(x10_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_2, 0(x8_p0_0)	] [<src.tracesynth.synth.constraint.Constraint object at 0x70349cfba780>, <src.tracesynth.synth.constraint.Constraint object at 0x70349cba94c0>] False
{0:x6=x; 0:x8=y; 0:x10=z; 1:x6=z; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> xor x7, x5, x5 | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x7, 1  | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)   | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x10)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x9==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=0;  => 1
0:x5=0; 0:x9=1;  => 1
0:x5=1; 0:x9=0;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0657s
#Executions: 24

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 R;addr;W;po;R 
def ppo_candidate_func38(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
#  PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 3
candidate_ppos size: 1
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [R];po;[W];po;[R], relax is False
candidate_ppo: [R];data;[W];po;[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 2 cur candidate_ppo: [R];po;[W];po;[R],relax is False
[R];po;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[W];po;[R] PPOValidFlag.Invalid
ID: 3 cur candidate_ppo: [R];data;[W];po;[R],relax is False
[R];data;[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];data;[W];po;[R] contain_flag False can_relax_flag False
add ppo [R];data;[W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[R];addr;[W];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[R];addr;[W];po;[R]', '[R];data;[W];po;[R]']
ppo [R];data;[W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus DpDatadW PodWR Fre Fence.rw.rwdWW Rfe
[R];data;[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
ppo [R];data;[W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]
['R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];data;[W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];data;[W];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];data;[W];po;[R]
start check
check counter ppo
ppo:[R];data;[W];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];data;[W];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/new_tests/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];data;[W];po;[R], cur_failed_litmus_tests: [], passed? True

[R];data;[W];po;[R] pass test
==== candidate ppo ====
[R];data;[W];po;[R] [R];data;[W];po;[R] False
finished /home/whq/Desktop/code_list/tracesynth/src/tracesynth/../output/complete_litmus_rvwmo/R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 2
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 3
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 4
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 5
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 6
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 7
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 8
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 9
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 10
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 11
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 12
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 13
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 14
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 15
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 16
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 17
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
iterate 1 final validate:
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array final start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
check cat arrat final end
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/memory_model_variant/variant/strong_ppo12.cat
/home/whq/Desktop/code_list/tracesynth/src/tracesynth/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
final validate True
failed_litmus_tests []
[('ppo_candidate_func0', 'R;addr;W;po;R', '\ndef ppo_candidate_func0(ra, e1: Event, e3) -> bool:\n    return any([ra.R(e1) and ra.addr(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])\n# ', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func1', 'R;data;W;po;R', '\ndef ppo_candidate_func1(ra, e1: Event, e3) -> bool:\n    return any([ra.R(e1) and ra.data(e1,e2) and ra.W(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])\n# ', <PPOInitFlag.Verified: 3>)]
ppo_list
[W];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];po;[R]
[R];fencerel(Fence.rw.w);[R]
[R];po;[W]
[R];fencerel(Fence.w.w);[W]
[W];po;[R]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];ctrl;[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];po;[W];po;[R]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po;[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[XSc];po;[R]
[XSc];fencerel(Fence.r.r);[R]
[W];po;[AMO]
[XSc];po;[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.rw.r);[W]
[R];po;[R];po;[R]
[R];addr;[R];po;[R]
[R];po;[R];ctrl;[R]
[R];addr;[R];ctrl;[R]
