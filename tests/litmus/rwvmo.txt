test ppo3:R;rsw;R
synth litmus test for ppo: [R];rsw;[R]
ppo [<class 'src.slide.synth.memory_relation.R'>, <class 'src.slide.synth.memory_relation.Rsw'>, <class 'src.slide.synth.memory_relation.R'>]
new_ppo [<class 'src.slide.synth.memory_relation.R'>, <class 'src.slide.synth.memory_relation.Rsw'>, <class 'src.slide.synth.memory_relation.R'>]
check legal [R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 ori x8,x0,1  | ori x7,x0,1 ;
 sw x8,0(x9)  | sw x7,0(x8) ;
 lw x10,0(x9) |             ;
exists (0:x10=2 /\ 0:x5=1)

use herd check start after pass transform PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x6)  | sw x5,0(x6) ;
 ori x8,x0,1  | fence rw,rw ;
 sw x8,0(x9)  | ori x7,x0,1 ;
 lw x10,0(x9) | sw x7,0(x8) ;
exists (0:x10=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 xor x8,x7,x7   | fence rw,rw ;
 ori x9,x0,1    | ori x7,x0,1 ;
 add x11,x10,x8 | sw x7,0(x8) ;
 sw x9,0(x11)   |             ;
 lw x12,0(x10)  |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x6)  | sw x5,0(x6) ;
 xor x8,x7,x7 | fence rw,rw ;
 ori x8,x8,1  | ori x7,x0,1 ;
 sw x8,0(x9)  | sw x7,0(x8) ;
 lw x10,0(x9) |             ;
exists (0:x10=2 /\ 0:x5=1)

use herd check start after pass transform PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 bne x7,x0,LC00 | fence rw,rw ;
 LC00:          | ori x7,x0,1 ;
 ori x8,x0,1    | sw x7,0(x8) ;
 sw x8,0(x9)    |             ;
 lw x10,0(x9)   |             ;
exists (0:x10=2 /\ 0:x5=1)

use herd check start after pass transform PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal [R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | lw x5,0(x6) ;
 lw x7,0(x6) | fence rw,rw ;
 fence rw,rw | ori x7,x0,1 ;
 ori x8,x0,1 | sw x7,0(x8) ;
 sw x8,0(x9) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | lw x5,0(x6) ;
 lw x7,0(x6) | fence rw,rw ;
 ori x8,x0,1 | ori x7,x0,1 ;
 sw x8,0(x9) | sw x7,0(x8) ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 xor x8,x7,x7   | ori x7,x0,1 ;
 ori x9,x0,1    | sw x7,0(x8) ;
 add x11,x10,x8 |             ;
 sw x9,0(x11)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 xor x8,x7,x7 | ori x7,x0,1 ;
 ori x8,x8,1  | sw x7,0(x8) ;
 sw x8,0(x9)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 bne x7,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 ori x8,x0,1    |             ;
 sw x8,0(x9)    |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal [R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | ori x5,x0,1 ;
 lw x7,0(x6) | sw x5,0(x6) ;
 fence rw,rw | fence rw,rw ;
 lw x8,0(x9) | ori x7,x0,1 ;
             | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x8=0)

use herd check start after pass transform PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | ori x5,x0,1 ;
 lw x7,0(x6) | sw x5,0(x6) ;
 lw x8,0(x9) | fence rw,rw ;
             | ori x7,x0,1 ;
             | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x8=0)

use herd check start after pass transform PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=0; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=0; , 0:x5=1; 0:x8=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 xor x8,x7,x7   | fence rw,rw ;
 add x11,x10,x8 | ori x7,x0,1 ;
 lw x9,0(x11)   | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 bne x7,x0,LC00 | fence rw,rw ;
 LC00:          | ori x7,x0,1 ;
 lw x8,0(x9)    | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x8=0)

use herd check start after pass transform PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=0; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=0; , 0:x5=1; 0:x8=1; ]}
[]
use herd check result:  False
check legal [R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal [R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [W, rfi, R, rsw, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fri, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fri, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Rfi PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x9,x0,1   | lw x9,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x7=2 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR PodRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR PodRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR PodRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Rfi PosRR PodRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 ori x9,x0,1   | sw x7,0(x8) ;
 sw x9,0(x10)  | lw x9,0(x8) ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x7=2 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR PodRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, po, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, addrS, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrS, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpAddrdW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Rfi PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 ori x10,x0,1   | lw x9,0(x8) ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
 lw x13,0(x11)  |             ;
exists (0:x13=2 /\ 0:x7=2 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; , 0:x7=2; 1:x9=2; 0:x13=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; , 0:x7=2; 1:x9=2; 0:x13=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, addrD, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrD, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpDatadW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpDatadW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpDatadW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Rfi PosRR DpDatadW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 xor x9,x8,x8  | sw x7,0(x8) ;
 ori x9,x9,1   | lw x9,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x7=2 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR DpDatadW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, dataD, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataD, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, dataS, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataS, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpCtrldW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Rfi PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
 lw x11,0(x10)  |             ;
exists (0:x11=2 /\ 0:x7=2 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, coe, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fri, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fri, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Rfi PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x7=2 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Rfi PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceD, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR PodRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR PodRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR PodRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Rfi PosRR PodRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 ori x9,x0,1  | lw x9,0(x8) ;
 sw x9,0(x10) |             ;
exists (0:x7=2 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Rfi PosRR PodRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=1; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=1; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, po, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrS, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Rfi PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 xor x9,x8,x8   | lw x9,0(x8) ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
exists (0:x7=2 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Rfi PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrD, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpDatadW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Rfi PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 xor x9,x8,x8 | lw x9,0(x8) ;
 ori x9,x9,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x7=2 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Rfi PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataD, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataS, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Rfi PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 bne x8,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
exists (0:x7=2 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Rfi PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=1; , 0:x7=2; 1:x5=0; 1:x9=2; , 0:x7=2; 1:x5=1; 1:x9=1; , 0:x7=2; 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Rfi PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 lw x9,0(x10) | lw x9,0(x8) ;
exists (0:x7=2 /\ 0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceD, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, fenceS, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR PodRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR PodRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR PodRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Rfi PosRR PodRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 lw x9,0(x10) | sw x7,0(x8) ;
              | lw x9,0(x8) ;
exists (0:x7=2 /\ 0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR PodRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=0; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=0; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, po, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, po-loc, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, addrS, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrS, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpAddrdR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Rfi PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 add x12,x11,x9 | lw x9,0(x8) ;
 lw x10,0(x12)  |             ;
exists (0:x7=2 /\ 0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=0; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=0; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=0; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=0; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, addrD, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, addrD, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataD, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, dataD, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataD, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataD, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, dataS, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, dataS, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, dataS, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, dataS, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Rfi PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Rfi PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Rfi PosRR DpCtrldR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Rfi PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 lw x9,0(x10)   |             ;
exists (0:x7=2 /\ 0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Rfi PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=0; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x7=1; 0:x9=0; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlD, R, fre, W, fenceS, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceD, R, coe]
check legal [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal pass [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal [W, rfi, R, rsw, R, ctrlS, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 ori x5,x0,2 | ori x5,x0,1 ;
 sw x5,0(x6) | sw x5,0(x6) ;
 fence rw,rw | fence rw,rw ;
 lw x7,0(x8) | ori x7,x0,1 ;
 lw x9,0(x8) | sw x7,0(x8) ;
             | lw x9,0(x8) ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fri Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fri Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fri Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR Fri Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 | lw x9,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fri Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; 0:x11=1; , 0:x9=0; 1:x9=1; 0:x11=2; , 0:x9=2; 1:x9=1; 0:x11=1; , 0:x9=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; 0:x11=1; , 0:x9=0; 1:x9=1; 0:x11=2; , 0:x9=2; 1:x9=1; 0:x11=1; , 0:x9=2; 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fri, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fri, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 fence rw,rw   | lw x9,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,4  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,3 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 fence rw,rw  | lw x8,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 ori x10,x0,1  | lw x9,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, W, coe, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,4  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,3 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 ori x10,x0,1 | lw x8,0(x6) ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PosRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PosRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PosRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR PosRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 | lw x9,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR PosRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 xor x10,x9,x9  | lw x9,0(x8) ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x8)   |             ;
exists (0:x13=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | ori x5,x0,2 ;
 sw x5,0(x6)     | sw x5,0(x6) ;
 fence rw,rw     | fence rw,rw ;
 lw x7,0(x8)     | ori x7,x0,1 ;
 lw x9,0(x8)     | sw x7,0(x8) ;
 xor x10,x9,x9   | lw x9,0(x8) ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
 lw x14,0(x12)   |             ;
exists (0:x14=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x14=1; , 1:x9=1; 0:x14=2; , 1:x9=2; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x14=1; , 1:x9=1; 0:x14=2; , 1:x9=2; 0:x14=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,4    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,3 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 xor x10,x9,x9  | lw x8,0(x6) ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x6)   |             ;
exists (0:x13=2 /\ 1:x8=4)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x13=1; , 1:x8=3; 0:x13=1; , 1:x8=3; 0:x13=2; , 1:x8=3; 0:x13=3; , 1:x8=4; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x13=1; , 1:x8=3; 0:x13=1; , 1:x8=3; 0:x13=2; , 1:x8=3; 0:x13=3; , 1:x8=4; 0:x13=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 | lw x9,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 ori x5,x0,4   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,3 ;
 lw x9,0(x8)   | sw x7,0(x6) ;
 xor x10,x9,x9 | lw x8,0(x6) ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
 lw x11,0(x6)  |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 | lw x9,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
 lw x11,0(x8)  |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
 lw x12,0(x11)  |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,4    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,3 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 bne x9,x0,LC00 | lw x8,0(x6) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
 lw x11,0(x6)   |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwdWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
 lw x11,0(x8)   |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fri Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fri Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fri Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR Fri Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x8)  | sw x7,0(x8) ;
 lw x9,0(x8)  | lw x9,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (0:x9=0 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fri Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x5=0; 1:x9=1; , 0:x9=0; 1:x5=0; 1:x9=2; , 0:x9=0; 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x5=0; 1:x9=1; , 0:x9=0; 1:x5=0; 1:x9=2; , 0:x9=0; 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 lw x7,0(x8)   | sw x7,0(x8) ;
 lw x9,0(x8)   | lw x9,0(x8) ;
 fence rw,rw   |             ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,2 ;
 lw x7,0(x8)  | sw x7,0(x6) ;
 lw x9,0(x8)  | lw x8,0(x6) ;
 fence rw,rw  |             ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x8)  | sw x7,0(x8) ;
 lw x9,0(x8)  | lw x9,0(x8) ;
 fence rw,rw  |             ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 lw x7,0(x8)   | sw x7,0(x8) ;
 lw x9,0(x8)   | lw x9,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,2 ;
 lw x7,0(x8)  | sw x7,0(x6) ;
 lw x9,0(x8)  | lw x8,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PosRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x8)  | sw x7,0(x8) ;
 lw x9,0(x8)  | lw x9,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,1 ;
 lw x7,0(x8)    | sw x7,0(x8) ;
 lw x9,0(x8)    | lw x9,0(x8) ;
 xor x10,x9,x9  |             ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | lw x5,0(x6) ;
 sw x5,0(x6)     | fence rw,rw ;
 fence rw,rw     | ori x7,x0,1 ;
 lw x7,0(x8)     | sw x7,0(x8) ;
 lw x9,0(x8)     | lw x9,0(x8) ;
 xor x10,x9,x9   |             ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,2 ;
 lw x7,0(x8)    | sw x7,0(x6) ;
 lw x9,0(x8)    | lw x8,0(x6) ;
 xor x10,x9,x9  |             ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 lw x7,0(x8)   | sw x7,0(x8) ;
 lw x9,0(x8)   | lw x9,0(x8) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 ori x5,x0,3   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,2 ;
 lw x7,0(x8)   | sw x7,0(x6) ;
 lw x9,0(x8)   | lw x8,0(x6) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 lw x7,0(x8)   | sw x7,0(x8) ;
 lw x9,0(x8)   | lw x9,0(x8) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,1 ;
 lw x7,0(x8)    | sw x7,0(x8) ;
 lw x9,0(x8)    | lw x9,0(x8) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,2 ;
 lw x7,0(x8)    | sw x7,0(x6) ;
 lw x9,0(x8)    | lw x8,0(x6) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwdWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,1 ;
 lw x7,0(x8)    | sw x7,0(x8) ;
 lw x9,0(x8)    | lw x9,0(x8) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,1 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 fence rw,rw   | lw x9,0(x8) ;
 lw x10,0(x11) |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 fence rw,rw  | lw x8,0(x6) ;
 lw x10,0(x6) |             ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 lw x10,0(x8) |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,1 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 lw x10,0(x11) | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po, R, fre, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 lw x10,0(x6) | lw x8,0(x6) ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform Fence.rw.rwdWR PosRR PodRR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR PosRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR PosRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR PosRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR PosRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 lw x10,0(x8) | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR PosRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 xor x10,x9,x9  | lw x9,0(x8) ;
 add x12,x8,x10 |             ;
 lw x11,0(x12)  |             ;
exists (0:x11=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | ori x5,x0,1 ;
 sw x5,0(x6)     | sw x5,0(x6) ;
 fence rw,rw     | fence rw,rw ;
 lw x7,0(x8)     | ori x7,x0,1 ;
 lw x9,0(x8)     | sw x7,0(x8) ;
 xor x10,x9,x9   | lw x9,0(x8) ;
 add x13,x12,x10 |             ;
 lw x11,0(x13)   |             ;
exists (0:x11=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 xor x10,x9,x9  | lw x8,0(x6) ;
 add x12,x6,x10 |             ;
 lw x11,0(x12)  |             ;
exists (0:x11=0 /\ 1:x8=3)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x11=1; , 1:x8=2; 0:x11=2; , 1:x8=2; 0:x11=3; , 1:x8=3; 0:x11=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x11=1; , 1:x8=2; 0:x11=2; , 1:x8=2; 0:x11=3; , 1:x8=3; 0:x11=3; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, R, fre, W, fenceD, W, coe]
check legal [W, fenceD, R, rsw, R, dataD, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataD, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, dataD, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, R, fre, W, fenceD, W, coe]
check legal [W, fenceD, R, rsw, R, dataS, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, dataS, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, dataS, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 lw x10,0(x11)  |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 bne x9,x0,LC00 | lw x8,0(x6) ;
 LC00:          |             ;
 lw x10,0(x6)   |             ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwdWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwdWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 lw x10,0(x8)   |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwdWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, R, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal [W, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fri, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fri, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwsWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x6)   | ori x7,x0,1 ;
 lw x8,0(x6)   | sw x7,0(x8) ;
 fence rw,rw   | lw x9,0(x8) ;
 ori x9,x0,1   |             ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR PodRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR PodRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR PodRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwsWR PosRR PodRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x6)   | ori x7,x0,1 ;
 lw x8,0(x6)   | sw x7,0(x8) ;
 ori x9,x0,1   | lw x9,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR PodRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, po, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwsWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 xor x9,x8,x8   | lw x9,0(x8) ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
 lw x13,0(x11)  |             ;
exists (0:x13=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwsWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x6)   | ori x7,x0,1 ;
 lw x8,0(x6)   | sw x7,0(x8) ;
 xor x9,x8,x8  | lw x9,0(x8) ;
 ori x9,x9,1   |             ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=Fence.rw.rwsWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 bne x8,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
 lw x11,0(x10)  |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwsWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x6)  | sw x7,0(x8) ;
 lw x8,0(x6)  | lw x9,0(x8) ;
 fence rw,rw  |             ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR PodRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwsWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x6)  | sw x7,0(x8) ;
 lw x8,0(x6)  | lw x9,0(x8) ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, po, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwsWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,1 ;
 lw x7,0(x6)    | sw x7,0(x8) ;
 lw x8,0(x6)    | lw x9,0(x8) ;
 xor x9,x8,x8   |             ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwsWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x7,0(x6)  | sw x7,0(x8) ;
 lw x8,0(x6)  | lw x9,0(x8) ;
 xor x9,x8,x8 |             ;
 ori x9,x9,1  |             ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=Fence.rw.rwsWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 fence rw,rw    | ori x7,x0,1 ;
 lw x7,0(x6)    | sw x7,0(x8) ;
 lw x8,0(x6)    | lw x9,0(x8) ;
 bne x8,x0,LC00 |             ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwsWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 lw x9,0(x10) |             ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR PodRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR PodRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR PodRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwsWR PosRR PodRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 lw x9,0(x10) | lw x9,0(x8) ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR PodRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, po, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwsWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 xor x9,x8,x8   | lw x9,0(x8) ;
 add x12,x11,x9 |             ;
 lw x10,0(x12)  |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, dataD, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataD, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataD, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, dataS, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, dataS, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform Fence.rw.rwsWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=Fence.rw.rwsWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 bne x8,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 lw x9,0(x10)   |             ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform Fence.rw.rwsWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, R, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal pass [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal [W, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 ori x5,x0,2 | ori x5,x0,1 ;
 sw x5,0(x6) | sw x5,0(x6) ;
 lw x7,0(x8) | fence rw,rw ;
 lw x9,0(x8) | ori x7,x0,1 ;
             | sw x7,0(x8) ;
             | lw x9,0(x8) ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fri Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fri Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fri Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR Fri Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) | lw x9,0(x8) ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x9=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fri Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; 0:x11=1; , 0:x9=0; 1:x9=1; 0:x11=2; , 0:x9=0; 1:x9=2; 0:x11=1; , 0:x9=0; 1:x9=2; 0:x11=2; , 0:x9=2; 1:x9=1; 0:x11=1; , 0:x9=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; 0:x11=1; , 0:x9=0; 1:x9=1; 0:x11=2; , 0:x9=0; 1:x9=2; 0:x11=1; , 0:x9=0; 1:x9=2; 0:x11=2; , 0:x9=2; 1:x9=1; 0:x11=1; , 0:x9=2; 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fri, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, fri, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x10,x0,1  | lw x9,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,4  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,3 ;
 fence rw,rw  | sw x7,0(x6) ;
 ori x10,x0,1 | lw x8,0(x6) ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 ori x10,x0,1 | lw x9,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceS, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, fenceS, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, po, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PodRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=PodWR PosRR PodRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 ori x10,x0,1  | sw x7,0(x8) ;
 sw x10,0(x11) | lw x9,0(x8) ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR PodRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po, W, coe, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR PodRW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=PodWR PosRR PodRW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,4  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,3 ;
 ori x10,x0,1 | sw x7,0(x6) ;
 sw x10,0(x6) | lw x8,0(x6) ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform PodWR PosRR PodRW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PosRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PosRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PosRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR PosRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,2 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) | lw x9,0(x8) ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR PosRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po-loc, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, po-loc, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 xor x10,x9,x9  | sw x7,0(x8) ;
 ori x11,x0,1   | lw x9,0(x8) ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x8)   |             ;
exists (0:x13=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpAddrsW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=2; 0:x13=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=2; 0:x13=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrS, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, addrS, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | ori x5,x0,2 ;
 sw x5,0(x6)     | sw x5,0(x6) ;
 lw x7,0(x8)     | fence rw,rw ;
 lw x9,0(x8)     | ori x7,x0,1 ;
 xor x10,x9,x9   | sw x7,0(x8) ;
 ori x11,x0,1    | lw x9,0(x8) ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
 lw x14,0(x12)   |             ;
exists (0:x14=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x14=1; , 1:x9=1; 0:x14=2; , 1:x9=2; 0:x14=1; , 1:x9=2; 0:x14=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x14=1; , 1:x9=1; 0:x14=2; , 1:x9=2; 0:x14=1; , 1:x9=2; 0:x14=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=PodWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,4    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,3 ;
 xor x10,x9,x9  | sw x7,0(x6) ;
 ori x11,x0,1   | lw x8,0(x6) ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x6)   |             ;
exists (0:x13=2 /\ 1:x8=4)

use herd check start after pass transform PodWR PosRR DpAddrdW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x13=1; , 1:x8=3; 0:x13=1; , 1:x8=3; 0:x13=2; , 1:x8=3; 0:x13=3; , 1:x8=4; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x13=1; , 1:x8=3; 0:x13=1; , 1:x8=3; 0:x13=2; , 1:x8=3; 0:x13=3; , 1:x8=4; 0:x13=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 | lw x9,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataD, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=PodWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 ori x5,x0,4   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,3 ;
 xor x10,x9,x9 | sw x7,0(x6) ;
 ori x10,x10,1 | lw x8,0(x6) ;
 sw x10,0(x6)  |             ;
 lw x11,0(x6)  |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform PodWR PosRR DpDatadW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataD, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 | lw x9,0(x8) ;
 sw x10,0(x8)  |             ;
 lw x11,0(x8)  |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpDatasW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataS, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, dataS, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
 lw x12,0(x11)  |             ;
exists (0:x12=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=2; 0:x12=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Co Co
Orig=PodWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,4    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,3 ;
 bne x9,x0,LC00 | sw x7,0(x6) ;
 LC00:          | lw x8,0(x6) ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
 lw x11,0(x6)   |             ;
exists (0:x11=2 /\ 1:x8=4)

use herd check start after pass transform PodWR PosRR DpCtrldW Coe Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=1; 0:x11=1; , 1:x8=3; 0:x11=1; , 1:x8=3; 0:x11=2; , 1:x8=3; 0:x11=3; , 1:x8=4; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PodWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
 lw x11,0(x8)   |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpCtrlsW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlS, W, coe, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, ctrlS, W, coe, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fri Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fri Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fri Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR Fri Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 | lw x9,0(x8) ;
 sw x10,0(x8) |             ;
exists (0:x9=0 /\ 1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR Fri Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x5=0; 1:x9=1; , 0:x9=0; 1:x5=0; 1:x9=2; , 0:x9=0; 1:x5=1; 1:x9=1; , 0:x9=0; 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x5=0; 1:x9=1; , 0:x9=0; 1:x5=0; 1:x9=2; , 0:x9=0; 1:x5=1; 1:x9=1; , 0:x9=0; 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fri, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, fri, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 fence rw,rw   | lw x9,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 fence rw,rw  | lw x8,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceS, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, fenceS, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 ori x10,x0,1  | lw x9,0(x8) ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=PodWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 ori x10,x0,1 | lw x8,0(x6) ;
 sw x10,0(x6) |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR PodRW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PosRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 | lw x9,0(x8) ;
 sw x10,0(x8) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR PosRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po-loc, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, po-loc, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 xor x10,x9,x9  | lw x9,0(x8) ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpAddrsW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrS, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, addrS, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | lw x5,0(x6) ;
 sw x5,0(x6)     | fence rw,rw ;
 lw x7,0(x8)     | ori x7,x0,1 ;
 lw x9,0(x8)     | sw x7,0(x8) ;
 xor x10,x9,x9   | lw x9,0(x8) ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=PodWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 xor x10,x9,x9  | lw x8,0(x6) ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpAddrdW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 | lw x9,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataD, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=PodWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 ori x5,x0,3   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,2 ;
 lw x9,0(x8)   | sw x7,0(x6) ;
 xor x10,x9,x9 | lw x8,0(x6) ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpDatadW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataD, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | lw x5,0(x6) ;
 sw x5,0(x6)   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 | lw x9,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpDatasW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, dataS, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, dataS, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe"
Generator=diyone7 (version 7.56)
Com=Rf Co
Orig=PodWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 bne x9,x0,LC00 | lw x8,0(x6) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
exists (1:x8=3 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpCtrldW Rfe Fence.rw.rwsRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x8=1; , 1:x5=0; 1:x8=2; , 1:x5=0; 1:x8=3; , 1:x5=1; 1:x8=2; , 1:x5=3; 1:x8=1; , 1:x5=3; 1:x8=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PodWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PodWR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal [W, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,1 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 lw x10,0(x11) | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 fence rw,rw  | sw x7,0(x6) ;
 lw x10,0(x6) | lw x8,0(x6) ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform PodWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceD, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 lw x10,0(x8) | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, fenceS, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, fenceS, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, po, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PodRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR PodRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,1 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 lw x10,0(x11) | sw x7,0(x8) ;
               | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR PodRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po, R, fre, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR PodRR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PodRR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PodRR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=PodWR PosRR PodRR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 ori x5,x0,3  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 lw x10,0(x6) | sw x7,0(x6) ;
              | lw x8,0(x6) ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform PodWR PosRR PodRR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR PosRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR PosRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR PosRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR PosRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 lw x10,0(x8) | sw x7,0(x8) ;
              | lw x9,0(x8) ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR PosRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, po-loc, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, po-loc, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 xor x10,x9,x9  | sw x7,0(x8) ;
 add x12,x8,x10 | lw x9,0(x8) ;
 lw x11,0(x12)  |             ;
exists (0:x11=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpAddrsR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=0; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=0; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrS, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, addrS, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 ori x5,x0,2     | ori x5,x0,1 ;
 sw x5,0(x6)     | sw x5,0(x6) ;
 lw x7,0(x8)     | fence rw,rw ;
 lw x9,0(x8)     | ori x7,x0,1 ;
 xor x10,x9,x9   | sw x7,0(x8) ;
 add x13,x12,x10 | lw x9,0(x8) ;
 lw x11,0(x13)   |             ;
exists (0:x11=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=0; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=0; , 1:x9=1; 0:x11=1; , 1:x9=2; 0:x11=0; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=PodWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 xor x10,x9,x9  | sw x7,0(x6) ;
 add x12,x6,x10 | lw x8,0(x6) ;
 lw x11,0(x12)  |             ;
exists (0:x11=0 /\ 1:x8=3)

use herd check start after pass transform PodWR PosRR DpAddrdR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x11=1; , 1:x8=2; 0:x11=2; , 1:x8=2; 0:x11=3; , 1:x8=3; 0:x11=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x11=1; , 1:x8=2; 0:x11=2; , 1:x8=2; 0:x11=3; , 1:x8=3; 0:x11=3; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, addrD, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataD, R, fre, W, fenceD, W, coe]
check legal [W, po, R, rsw, R, dataD, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataD, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, dataD, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, dataS, R, fre, W, fenceD, W, coe]
check legal [W, po, R, rsw, R, dataS, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, dataS, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, dataS, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 lw x10,0(x11)  |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe"
Generator=diyone7 (version 7.56)
Com=Fr Co
Orig=PodWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 ori x5,x0,3    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 bne x9,x0,LC00 | sw x7,0(x6) ;
 LC00:          | lw x8,0(x6) ;
 lw x10,0(x6)   |             ;
exists (0:x10=0 /\ 1:x8=3)

use herd check start after pass transform PodWR PosRR DpCtrldR Fre Fence.rw.rwsWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x8=2; 0:x10=1; , 1:x8=2; 0:x10=2; , 1:x8=2; 0:x10=3; , 1:x8=3; 0:x10=3; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlD, R, fre, W, fenceS, R, coe]
check legal [W, po, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PodWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PodWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 lw x10,0(x8)   |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PodWR PosRR DpCtrlsR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po, R, rsw, R, ctrlS, R, fre, W, fenceD, R, coe]
check legal [W, po, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal pass [W, po, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal [W, po, R, rsw, R, ctrlS, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fri, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fri, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fri, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fri, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PosWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x9,x0,1   | lw x9,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR PodRW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR PodRW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR PodRW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PosWR PosRR PodRW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 ori x9,x0,1   | sw x7,0(x8) ;
 sw x9,0(x10)  | lw x9,0(x8) ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR PodRW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, po, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PosWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 ori x10,x0,1   | lw x9,0(x8) ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
 lw x13,0(x11)  |             ;
exists (0:x13=2 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR DpAddrdW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=2; 0:x13=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=2; 0:x13=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PosWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 ori x5,x0,2   | ori x5,x0,2 ;
 sw x5,0(x6)   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 xor x9,x8,x8  | sw x7,0(x8) ;
 ori x9,x9,1   | lw x9,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR DpDatadW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Co
Orig=PosWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,2 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
 lw x11,0(x10)  |             ;
exists (0:x11=2 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR DpCtrldW Coe Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PosWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 fence rw,rw  | lw x9,0(x8) ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PosWR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR PodRW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PosWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 ori x9,x0,1  | lw x9,0(x8) ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PosWR PosRR PodRW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, po, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PosWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 xor x9,x8,x8   | lw x9,0(x8) ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PosWR PosRR DpAddrdW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PosWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | lw x5,0(x6) ;
 sw x5,0(x6)  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 xor x9,x8,x8 | lw x9,0(x8) ;
 ori x9,x9,1  |             ;
 sw x9,0(x10) |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PosWR PosRR DpDatadW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Co
Orig=PosWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | lw x5,0(x6) ;
 sw x5,0(x6)    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 bne x8,x0,LC00 | lw x9,0(x8) ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
exists (1:x9=2 /\ 1:x5=1)

use herd check start after pass transform PosWR PosRR DpCtrldW Rfe Fence.rw.rwdRW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x5=0; 1:x9=1; , 1:x5=0; 1:x9=2; , 1:x5=1; 1:x9=1; , 1:x5=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PosWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 lw x9,0(x10) | lw x9,0(x8) ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR PodRR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR PodRR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR PodRR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PosWR PosRR PodRR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 ori x5,x0,2  | ori x5,x0,1 ;
 sw x5,0(x6)  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 lw x9,0(x10) | sw x7,0(x8) ;
              | lw x9,0(x8) ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR PodRR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, po, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PosWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 add x12,x11,x9 | lw x9,0(x8) ;
 lw x10,0(x12)  |             ;
exists (0:x10=0 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR DpAddrdR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=0; , 1:x9=2; 0:x10=1; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, dataD, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataD, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataD, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, dataS, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, dataS, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, W, coe]
use herd check start before pass transform PosWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Co
Orig=PosWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 ori x5,x0,2    | ori x5,x0,1 ;
 sw x5,0(x6)    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          | lw x9,0(x8) ;
 lw x9,0(x10)   |             ;
exists (0:x9=0 /\ 1:x9=2)

use herd check start after pass transform PosWR PosRR DpCtrldR Fre Fence.rw.rwdWW Coe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x9=0; 1:x9=1; , 0:x9=0; 1:x9=2; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
use herd check result:  False
check legal [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, R, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal pass [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, W, coe]
check legal [W, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, R, coe]
check legal [R, fenceD, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | ori x5,x0,1 ;
 fence rw,rw | sw x5,0(x6) ;
 lw x7,0(x8) | fence rw,rw ;
 lw x9,0(x8) | ori x7,x0,1 ;
             | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fri Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fri Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fri Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR Fri Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1 /\ 0:x9=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fri Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 0:x11=1; , 0:x5=0; 0:x9=0; 0:x11=2; , 0:x5=0; 0:x9=2; 0:x11=1; , 0:x5=1; 0:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 0:x11=1; , 0:x5=0; 0:x9=0; 0:x11=2; , 0:x5=0; 0:x9=2; 0:x11=1; , 0:x5=1; 0:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,3 ;
 fence rw,rw  | sw x7,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 ori x10,x0,1  | sw x7,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,3 ;
 ori x10,x0,1 | sw x7,0(x6) ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PosRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 xor x10,x9,x9  | sw x7,0(x8) ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x8)   |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 fence rw,rw     | sw x5,0(x6) ;
 lw x7,0(x8)     | fence rw,rw ;
 lw x9,0(x8)     | ori x7,x0,1 ;
 xor x10,x9,x9   | sw x7,0(x8) ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
 lw x14,0(x12)   |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,3 ;
 xor x10,x9,x9  | sw x7,0(x6) ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x6)   |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,3 ;
 xor x10,x9,x9 | sw x7,0(x6) ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
 lw x11,0(x6)  |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
 lw x11,0(x8)  |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
 lw x12,0(x11)  |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,3 ;
 bne x9,x0,LC00 | sw x7,0(x6) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
 lw x11,0(x6)   |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwdRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
 lw x11,0(x8)   |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fri Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 0:x9=0 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 1:x5=0; , 0:x5=0; 0:x9=0; 1:x5=1; , 0:x5=1; 0:x9=0; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 1:x5=0; , 0:x5=0; 0:x9=0; 1:x5=1; , 0:x5=1; 0:x9=0; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 fence rw,rw   |             ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 fence rw,rw  |             ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 fence rw,rw  |             ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,2 ;
 lw x9,0(x8)  | sw x7,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x8)  | ori x7,x0,1 ;
 lw x9,0(x8)  | sw x7,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 xor x10,x9,x9  |             ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 fence rw,rw     | fence rw,rw ;
 lw x7,0(x8)     | ori x7,x0,1 ;
 lw x9,0(x8)     | sw x7,0(x8) ;
 xor x10,x9,x9   |             ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 xor x10,x9,x9  |             ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,2 ;
 lw x9,0(x8)   | sw x7,0(x6) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 fence rw,rw   | fence rw,rw ;
 lw x7,0(x8)   | ori x7,x0,1 ;
 lw x9,0(x8)   | sw x7,0(x8) ;
 xor x10,x9,x9 |             ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,2 ;
 lw x9,0(x8)    | sw x7,0(x6) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwdRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x8)    | ori x7,x0,1 ;
 lw x9,0(x8)    | sw x7,0(x8) ;
 bne x9,x0,LC00 |             ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 lw x10,0(x11) |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 fence rw,rw  | sw x7,0(x6) ;
 lw x10,0(x6) |             ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 lw x10,0(x8) |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 lw x10,0(x11) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 lw x10,0(x6) | sw x7,0(x6) ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 lw x10,0(x8) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 xor x10,x9,x9  | sw x7,0(x8) ;
 add x12,x8,x10 |             ;
 lw x11,0(x12)  |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 fence rw,rw     | sw x5,0(x6) ;
 lw x7,0(x8)     | fence rw,rw ;
 lw x9,0(x8)     | ori x7,x0,1 ;
 xor x10,x9,x9   | sw x7,0(x8) ;
 add x13,x12,x10 |             ;
 lw x11,0(x13)   |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 xor x10,x9,x9  | sw x7,0(x6) ;
 add x12,x6,x10 |             ;
 lw x11,0(x12)  |             ;
exists (0:x5=2 /\ 0:x11=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; , 0:x5=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; , 0:x5=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, fenceD, R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, fenceD, R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 lw x10,0(x11)  |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 bne x9,x0,LC00 | sw x7,0(x6) ;
 LC00:          |             ;
 lw x10,0(x6)   |             ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwdRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwdRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwdRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwdRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 lw x10,0(x8)   |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwdRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceD, R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwsRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x9,x0,1   |             ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwsRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 ori x9,x0,1   | sw x7,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwsRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
 lw x13,0(x11)  |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwsRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 fence rw,rw   | sw x5,0(x6) ;
 lw x7,0(x6)   | fence rw,rw ;
 lw x8,0(x6)   | ori x7,x0,1 ;
 xor x9,x8,x8  | sw x7,0(x8) ;
 ori x9,x9,1   |             ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=Fence.rw.rwsRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
 lw x11,0(x10)  |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwsRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 fence rw,rw  |             ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwsRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwsRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 xor x9,x8,x8   |             ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwsRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 fence rw,rw  | fence rw,rw ;
 lw x7,0(x6)  | ori x7,x0,1 ;
 lw x8,0(x6)  | sw x7,0(x8) ;
 xor x9,x8,x8 |             ;
 ori x9,x9,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=Fence.rw.rwsRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 fence rw,rw    | fence rw,rw ;
 lw x7,0(x6)    | ori x7,x0,1 ;
 lw x8,0(x6)    | sw x7,0(x8) ;
 bne x8,x0,LC00 |             ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwsRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 lw x9,0(x10) |             ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform Fence.rw.rwsRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwsRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 fence rw,rw  | sw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 lw x9,0(x10) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform Fence.rw.rwsRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwsRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 add x12,x11,x9 |             ;
 lw x10,0(x12)  |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform Fence.rw.rwsRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test Fence.rw.rwsRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"Fence.rw.rwsRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=Fence.rw.rwsRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 fence rw,rw    | sw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 lw x9,0(x10)   |             ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform Fence.rw.rwsRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, fenceS, R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0          | P1          ;
 lw x5,0(x6) | ori x5,x0,1 ;
 lw x7,0(x8) | sw x5,0(x6) ;
 lw x9,0(x8) | fence rw,rw ;
             | ori x7,x0,1 ;
             | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PodRR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fri Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fri Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fri Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR Fri Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 ori x10,x0,1 | ori x7,x0,1 ;
 sw x10,0(x8) | sw x7,0(x8) ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PodRR PosRR Fri Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 0:x11=1; , 0:x5=0; 0:x9=0; 0:x11=2; , 0:x5=0; 0:x9=2; 0:x11=1; , 0:x5=1; 0:x9=0; 0:x11=1; , 0:x5=1; 0:x9=0; 0:x11=2; , 0:x5=1; 0:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 0:x11=1; , 0:x5=0; 0:x9=0; 0:x11=2; , 0:x5=0; 0:x9=2; 0:x11=1; , 0:x5=1; 0:x9=0; 0:x11=1; , 0:x5=1; 0:x9=0; 0:x11=2; , 0:x5=1; 0:x9=2; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 ori x10,x0,1  | sw x7,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,3 ;
 ori x10,x0,1 | sw x7,0(x6) ;
 sw x10,0(x6) |             ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) |             ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 ori x10,x0,1  | ori x7,x0,1 ;
 sw x10,0(x11) | sw x7,0(x8) ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=PodRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 ori x10,x0,1 | ori x7,x0,3 ;
 sw x10,0(x6) | sw x7,0(x6) ;
 lw x11,0(x6) |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform PodRR PosRR PodRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PosRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,2 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 ori x10,x0,1 | ori x7,x0,1 ;
 sw x10,0(x8) | sw x7,0(x8) ;
 lw x11,0(x8) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR PosRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 xor x10,x9,x9  | ori x7,x0,1 ;
 ori x11,x0,1   | sw x7,0(x8) ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x8)   |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; , 0:x5=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; , 0:x5=1; 0:x13=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 lw x7,0(x8)     | sw x5,0(x6) ;
 lw x9,0(x8)     | fence rw,rw ;
 xor x10,x9,x9   | ori x7,x0,1 ;
 ori x11,x0,1    | sw x7,0(x8) ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
 lw x14,0(x12)   |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; , 0:x5=1; 0:x14=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; , 0:x5=1; 0:x14=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=PodRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 xor x10,x9,x9  | ori x7,x0,3 ;
 ori x11,x0,1   | sw x7,0(x6) ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
 lw x13,0(x6)   |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform PodRR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 xor x10,x9,x9 | ori x7,x0,1 ;
 ori x10,x10,1 | sw x7,0(x8) ;
 sw x10,0(x11) |             ;
 lw x12,0(x11) |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=PodRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 xor x10,x9,x9 | ori x7,x0,3 ;
 ori x10,x10,1 | sw x7,0(x6) ;
 sw x10,0(x6)  |             ;
 lw x11,0(x6)  |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform PodRR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 xor x10,x9,x9 | ori x7,x0,1 ;
 ori x10,x10,1 | sw x7,0(x8) ;
 sw x10,0(x8)  |             ;
 lw x11,0(x8)  |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
 lw x12,0(x11)  |             ;
exists (0:x12=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=PodRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,3 ;
 LC00:          | sw x7,0(x6) ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
 lw x11,0(x6)   |             ;
exists (0:x11=2 /\ 0:x5=3)

use herd check start after pass transform PodRR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=2; 0:x11=1; , 0:x5=2; 0:x11=3; , 0:x5=3; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PodRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
 lw x11,0(x8)   |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PodRR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fri Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 0:x9=0 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR Fri Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 1:x5=0; , 0:x5=0; 0:x9=0; 1:x5=1; , 0:x5=1; 0:x9=0; 1:x5=0; , 0:x5=1; 0:x9=0; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; 1:x5=0; , 0:x5=0; 0:x9=0; 1:x5=1; , 0:x5=1; 0:x9=0; 1:x5=0; , 0:x5=1; 0:x9=0; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 fence rw,rw   | sw x7,0(x8) ;
 ori x10,x0,1  |             ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 fence rw,rw  | sw x7,0(x6) ;
 ori x10,x0,1 |             ;
 sw x10,0(x6) |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 ori x10,x0,1 |             ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 ori x10,x0,1  | sw x7,0(x8) ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=PodRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,2 ;
 ori x10,x0,1 | sw x7,0(x6) ;
 sw x10,0(x6) |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x8)  | fence rw,rw ;
 lw x9,0(x8)  | ori x7,x0,1 ;
 ori x10,x0,1 | sw x7,0(x8) ;
 sw x10,0(x8) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 xor x10,x9,x9  | sw x7,0(x8) ;
 ori x11,x0,1   |             ;
 add x12,x8,x10 |             ;
 sw x11,0(x12)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 lw x7,0(x8)     | fence rw,rw ;
 lw x9,0(x8)     | ori x7,x0,1 ;
 xor x10,x9,x9   | sw x7,0(x8) ;
 ori x11,x0,1    |             ;
 add x13,x12,x10 |             ;
 sw x11,0(x13)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=PodRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 xor x10,x9,x9  | sw x7,0(x6) ;
 ori x11,x0,1   |             ;
 add x12,x6,x10 |             ;
 sw x11,0(x12)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x11) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=PodRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,2 ;
 xor x10,x9,x9 | sw x7,0(x6) ;
 ori x10,x10,1 |             ;
 sw x10,0(x6)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 lw x7,0(x8)   | fence rw,rw ;
 lw x9,0(x8)   | ori x7,x0,1 ;
 xor x10,x9,x9 | sw x7,0(x8) ;
 ori x10,x10,1 |             ;
 sw x10,0(x8)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x11)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=PodRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,2 ;
 bne x9,x0,LC00 | sw x7,0(x6) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x6)   |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PodRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x8)    | fence rw,rw ;
 lw x9,0(x8)    | ori x7,x0,1 ;
 bne x9,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x10,x0,1   |             ;
 sw x10,0(x8)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PodRR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, po, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 lw x10,0(x11) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,2 ;
 lw x10,0(x6) | sw x7,0(x6) ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x10,0(x8) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 lw x7,0(x8)   | sw x5,0(x6) ;
 lw x9,0(x8)   | fence rw,rw ;
 lw x10,0(x11) | ori x7,x0,1 ;
               | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PodRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=PodRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 lw x10,0(x6) | ori x7,x0,2 ;
              | sw x7,0(x6) ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR PodRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x8)  | sw x5,0(x6) ;
 lw x9,0(x8)  | fence rw,rw ;
 lw x10,0(x8) | ori x7,x0,1 ;
              | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 xor x10,x9,x9  | ori x7,x0,1 ;
 add x12,x8,x10 | sw x7,0(x8) ;
 lw x11,0(x12)  |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform PodRR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x12=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 lw x7,0(x8)     | sw x5,0(x6) ;
 lw x9,0(x8)     | fence rw,rw ;
 xor x10,x9,x9   | ori x7,x0,1 ;
 add x13,x12,x10 | sw x7,0(x8) ;
 lw x11,0(x13)   |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform PodRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=PodRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 xor x10,x9,x9  | ori x7,x0,2 ;
 add x12,x6,x10 | sw x7,0(x6) ;
 lw x11,0(x12)  |             ;
exists (0:x5=2 /\ 0:x11=0)

use herd check start after pass transform PodRR PosRR DpAddrdR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; , 0:x5=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; , 0:x5=2; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, po, R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, po, R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y; 0:x11=z;
1:x6=z; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 lw x10,0(x11)  |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=PodRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,2 ;
 LC00:          | sw x7,0(x6) ;
 lw x10,0(x6)   |             ;
exists (0:x5=2 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR DpCtrldR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; , 0:x5=2; 0:x10=2; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PodRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PodRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PodRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PodRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x8=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x8)    | sw x5,0(x6) ;
 lw x9,0(x8)    | fence rw,rw ;
 bne x9,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 lw x10,0(x8)   |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PodRR PosRR DpCtrlsR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=0; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po, R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, po, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, po, R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x6)   | sw x5,0(x6) ;
 lw x8,0(x6)   | fence rw,rw ;
 fence rw,rw   | ori x7,x0,1 ;
 ori x9,x0,1   | sw x7,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x6)   | sw x5,0(x6) ;
 lw x8,0(x6)   | fence rw,rw ;
 ori x9,x0,1   | ori x7,x0,1 ;
 sw x9,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; , 0:x5=1; 0:x11=2; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 lw x8,0(x6)    | fence rw,rw ;
 xor x9,x8,x8   | ori x7,x0,1 ;
 ori x10,x0,1   | sw x7,0(x8) ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
 lw x13,0(x11)  |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 lw x7,0(x6)   | sw x5,0(x6) ;
 lw x8,0(x6)   | fence rw,rw ;
 xor x9,x8,x8  | ori x7,x0,1 ;
 ori x9,x9,1   | sw x7,0(x8) ;
 sw x9,0(x10)  |             ;
 lw x11,0(x10) |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=PosRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,2 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 lw x8,0(x6)    | fence rw,rw ;
 bne x8,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
 lw x11,0(x10)  |             ;
exists (0:x11=2 /\ 0:x5=1)

use herd check start after pass transform PosRR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 fence rw,rw  | sw x7,0(x8) ;
 ori x9,x0,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 ori x9,x0,1  | sw x7,0(x8) ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 xor x9,x8,x8   | sw x7,0(x8) ;
 ori x10,x0,1   |             ;
 add x12,x11,x9 |             ;
 sw x10,0(x12)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | lw x5,0(x6) ;
 lw x7,0(x6)  | fence rw,rw ;
 lw x8,0(x6)  | ori x7,x0,1 ;
 xor x9,x8,x8 | sw x7,0(x8) ;
 ori x9,x9,1  |             ;
 sw x9,0(x10) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=PosRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | lw x5,0(x6) ;
 lw x7,0(x6)    | fence rw,rw ;
 lw x8,0(x6)    | ori x7,x0,1 ;
 bne x8,x0,LC00 | sw x7,0(x8) ;
 LC00:          |             ;
 ori x9,x0,1    |             ;
 sw x9,0(x10)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform PosRR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x6)  | sw x5,0(x6) ;
 lw x8,0(x6)  | fence rw,rw ;
 fence rw,rw  | ori x7,x0,1 ;
 lw x9,0(x10) | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PosRR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0           | P1          ;
 lw x5,0(x6)  | ori x5,x0,1 ;
 lw x7,0(x6)  | sw x5,0(x6) ;
 lw x8,0(x6)  | fence rw,rw ;
 lw x9,0(x10) | ori x7,x0,1 ;
              | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PosRR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x11=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 lw x8,0(x6)    | fence rw,rw ;
 xor x9,x8,x8   | ori x7,x0,1 ;
 add x12,x11,x9 | sw x7,0(x8) ;
 lw x10,0(x12)  |             ;
exists (0:x5=1 /\ 0:x10=0)

use herd check start after pass transform PosRR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform PosRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test PosRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"PosRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=PosRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x10=y;
1:x6=y; 1:x8=x;
}
 P0             | P1          ;
 lw x5,0(x6)    | ori x5,x0,1 ;
 lw x7,0(x6)    | sw x5,0(x6) ;
 lw x8,0(x6)    | fence rw,rw ;
 bne x8,x0,LC00 | ori x7,x0,1 ;
 LC00:          | sw x7,0(x8) ;
 lw x9,0(x10)   |             ;
exists (0:x5=1 /\ 0:x9=0)

use herd check start after pass transform PosRR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=0; , 0:x5=1; 0:x9=1; ]}
[]
use herd check result:  False
check legal [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, po-loc, R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrsR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x9,x6,x7  | fence rw,rw ;
 lw x8,0(x9)   | ori x7,x0,1 ;
 lw x10,0(x6)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 ori x11,x0,1  |             ;
 sw x11,0(x12) |             ;
 lw x13,0(x12) |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrsR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrsR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x9,x6,x7  | fence rw,rw ;
 lw x8,0(x9)   | ori x7,x0,1 ;
 lw x10,0(x6)  | sw x7,0(x8) ;
 ori x11,x0,1  |             ;
 sw x11,0(x12) |             ;
 lw x13,0(x12) |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrsR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrsR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x13=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x9,x6,x7    | fence rw,rw ;
 lw x8,0(x9)     | ori x7,x0,1 ;
 lw x10,0(x6)    | sw x7,0(x8) ;
 xor x11,x10,x10 |             ;
 ori x12,x0,1    |             ;
 add x14,x13,x11 |             ;
 sw x12,0(x14)   |             ;
 lw x15,0(x13)   |             ;
exists (0:x15=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=1; 0:x15=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=1; 0:x15=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrsR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x9,x6,x7    | fence rw,rw ;
 lw x8,0(x9)     | ori x7,x0,1 ;
 lw x10,0(x6)    | sw x7,0(x8) ;
 xor x11,x10,x10 |             ;
 ori x11,x11,1   |             ;
 sw x11,0(x12)   |             ;
 lw x13,0(x12)   |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrsR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x9,x6,x7    | fence rw,rw ;
 lw x8,0(x9)     | ori x7,x0,1 ;
 lw x10,0(x6)    | sw x7,0(x8) ;
 bne x10,x0,LC00 |             ;
 LC00:           |             ;
 ori x11,x0,1    |             ;
 sw x11,0(x12)   |             ;
 lw x13,0(x12)   |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrsR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x9,x6,x7  | ori x7,x0,1 ;
 lw x8,0(x9)   | sw x7,0(x8) ;
 lw x10,0(x6)  |             ;
 fence rw,rw   |             ;
 ori x11,x0,1  |             ;
 sw x11,0(x12) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrsR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrsR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x9,x6,x7  | ori x7,x0,1 ;
 lw x8,0(x9)   | sw x7,0(x8) ;
 lw x10,0(x6)  |             ;
 ori x11,x0,1  |             ;
 sw x11,0(x12) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrsR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrsR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x13=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x9,x6,x7    | ori x7,x0,1 ;
 lw x8,0(x9)     | sw x7,0(x8) ;
 lw x10,0(x6)    |             ;
 xor x11,x10,x10 |             ;
 ori x12,x0,1    |             ;
 add x14,x13,x11 |             ;
 sw x12,0(x14)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrsR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x9,x6,x7    | ori x7,x0,1 ;
 lw x8,0(x9)     | sw x7,0(x8) ;
 lw x10,0(x6)    |             ;
 xor x11,x10,x10 |             ;
 ori x11,x11,1   |             ;
 sw x11,0(x12)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrsR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x9,x6,x7    | ori x7,x0,1 ;
 lw x8,0(x9)     | sw x7,0(x8) ;
 lw x10,0(x6)    |             ;
 bne x10,x0,LC00 |             ;
 LC00:           |             ;
 ori x11,x0,1    |             ;
 sw x11,0(x12)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrsR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrsR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x9,x6,x7  | fence rw,rw ;
 lw x8,0(x9)   | ori x7,x0,1 ;
 lw x10,0(x6)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 lw x11,0(x12) |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform DpAddrsR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrsR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x9,x6,x7  | fence rw,rw ;
 lw x8,0(x9)   | ori x7,x0,1 ;
 lw x10,0(x6)  | sw x7,0(x8) ;
 lw x11,0(x12) |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform DpAddrsR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrsR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x13=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x9,x6,x7    | fence rw,rw ;
 lw x8,0(x9)     | ori x7,x0,1 ;
 lw x10,0(x6)    | sw x7,0(x8) ;
 xor x11,x10,x10 |             ;
 add x14,x13,x11 |             ;
 lw x12,0(x14)   |             ;
exists (0:x5=1 /\ 0:x12=0)

use herd check start after pass transform DpAddrsR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, addrD, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, addrD, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, addrD, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, dataD, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataD, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataD, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, dataS, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, dataS, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrsR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrsR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrsR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrsR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x12=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x9,x6,x7    | fence rw,rw ;
 lw x8,0(x9)     | ori x7,x0,1 ;
 lw x10,0(x6)    | sw x7,0(x8) ;
 bne x10,x0,LC00 |             ;
 LC00:           |             ;
 lw x11,0(x12)   |             ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform DpAddrsR PosRR DpCtrldR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=0; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlD, R, fre, W, fenceS, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceD, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceD, R, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceS, W, rfe]
check legal [R, addrS, R, rsw, R, ctrlS, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
exists (0:x5=1 /\ 0:x11=0)

use herd check start after pass transform DpAddrdR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fre, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fri, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fri Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fri Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fri Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR Fri Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
 lw x13,0(x9)  |             ;
exists (0:x13=2 /\ 0:x5=1 /\ 0:x11=0)

use herd check start after pass transform DpAddrdR PosRR Fri Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; 0:x13=1; , 0:x5=0; 0:x11=0; 0:x13=2; , 0:x5=0; 0:x11=2; 0:x13=1; , 0:x5=1; 0:x11=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x11=0; 0:x13=1; , 0:x5=0; 0:x11=0; 0:x13=2; , 0:x5=0; 0:x11=2; 0:x13=1; , 0:x5=1; 0:x11=2; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fri, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fri, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fri, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x13) |             ;
 lw x14,0(x13) |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,3 ;
 lw x11,0(x9)  | sw x7,0(x6) ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x6)  |             ;
 lw x13,0(x6)  |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
 lw x13,0(x9)  |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwsRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR PodRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 ori x12,x0,1  |             ;
 sw x12,0(x13) |             ;
 lw x14,0(x13) |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR PodRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=DpAddrdR PosRR PodRW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,3 ;
 lw x11,0(x9)  | sw x7,0(x6) ;
 ori x12,x0,1  |             ;
 sw x12,0(x6)  |             ;
 lw x13,0(x6)  |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform DpAddrdR PosRR PodRW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PosRW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PosRW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PosRW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR PosRW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,2 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
 lw x13,0(x9)  |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR PosRW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x14,x9,x12  |             ;
 sw x13,0(x14)   |             ;
 lw x15,0(x9)    |             ;
exists (0:x15=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpAddrsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=1; 0:x15=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=1; 0:x15=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrS, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x14=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x15,x14,x12 |             ;
 sw x13,0(x15)   |             ;
 lw x16,0(x14)   |             ;
exists (0:x16=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x16=1; , 0:x5=0; 0:x16=2; , 0:x5=1; 0:x16=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x16=1; , 0:x5=0; 0:x16=2; , 0:x5=1; 0:x16=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrD, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,3 ;
 lw x11,0(x9)    | sw x7,0(x6) ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x14,x6,x12  |             ;
 sw x13,0(x14)   |             ;
 lw x15,0(x6)    |             ;
exists (0:x15=2 /\ 0:x5=3)

use herd check start after pass transform DpAddrdR PosRR DpAddrdW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=0; 0:x15=3; , 0:x5=2; 0:x15=1; , 0:x5=2; 0:x15=3; , 0:x5=3; 0:x15=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x15=1; , 0:x5=0; 0:x15=2; , 0:x5=0; 0:x15=3; , 0:x5=2; 0:x15=1; , 0:x5=2; 0:x15=3; , 0:x5=3; 0:x15=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrD, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x13)   |             ;
 lw x14,0(x13)   |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpDatadW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataD, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=DpAddrdR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,3 ;
 lw x11,0(x9)    | sw x7,0(x6) ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x6)    |             ;
 lw x13,0(x6)    |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform DpAddrdR PosRR DpDatadW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataD, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x9)    |             ;
 lw x13,0(x9)    |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpDatasW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataS, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataS, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x13)   |             ;
 lw x14,0(x13)   |             ;
exists (0:x14=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x14=1; , 0:x5=0; 0:x14=2; , 0:x5=1; 0:x14=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Co Rf
Orig=DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,3 ;
 lw x11,0(x9)    | sw x7,0(x6) ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x6)    |             ;
 lw x13,0(x6)    |             ;
exists (0:x13=2 /\ 0:x5=3)

use herd check start after pass transform DpAddrdR PosRR DpCtrldW Coe Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=0; 0:x13=3; , 0:x5=2; 0:x13=1; , 0:x5=2; 0:x13=3; , 0:x5=3; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlD, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Co Rf
Orig=DpAddrdR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,2 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x9)    |             ;
 lw x13,0(x9)    |             ;
exists (0:x13=2 /\ 0:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpCtrlsW Coe Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, coe, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fri, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fri Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fri Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fri Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR Fri Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,1 ;
 lw x8,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x9)  |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
exists (0:x5=1 /\ 0:x11=0 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fri Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; 0:x11=0; , 0:x5=0; 1:x5=1; 0:x11=0; , 0:x5=1; 1:x5=0; 0:x11=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; 0:x11=0; , 0:x5=0; 1:x5=1; 0:x11=0; , 0:x5=1; 1:x5=0; 0:x11=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fri, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fri, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fri, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,1 ;
 lw x8,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x9)  |             ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x13) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,2 ;
 lw x8,0(x10)  | sw x7,0(x6) ;
 lw x11,0(x9)  |             ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x6)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,1 ;
 lw x8,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x9)  |             ;
 fence rw,rw   |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwsRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fenceS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,1 ;
 lw x8,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x9)  |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x13) |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR PodRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=DpAddrdR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,2 ;
 lw x8,0(x10)  | sw x7,0(x6) ;
 lw x11,0(x9)  |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x6)  |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR PodRW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PosRW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | lw x5,0(x6) ;
 xor x7,x5,x5  | fence rw,rw ;
 add x10,x9,x7 | ori x7,x0,1 ;
 lw x8,0(x10)  | sw x7,0(x8) ;
 lw x11,0(x9)  |             ;
 ori x12,x0,1  |             ;
 sw x12,0(x9)  |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR PosRW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, po-loc, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x14,x9,x12  |             ;
 sw x13,0(x14)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpAddrsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, addrS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y; 0:x14=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x15,x14,x12 |             ;
 sw x13,0(x15)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,2 ;
 lw x8,0(x10)    | sw x7,0(x6) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x13,x0,1    |             ;
 add x14,x6,x12  |             ;
 sw x13,0(x14)   |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpAddrdW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x13)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,2 ;
 lw x8,0(x10)    | sw x7,0(x6) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x6)    |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpDatadW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 xor x12,x11,x11 |             ;
 ori x12,x12,1   |             ;
 sw x12,0(x9)    |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpDatasW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, dataS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=W,1:z=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x13)   |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe"
Generator=diyone7 (version 7.56)
Com=Rf Rf
Orig=DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,2 ;
 lw x8,0(x10)    | sw x7,0(x6) ;
 lw x11,0(x9)    |             ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x6)    |             ;
exists (0:x5=2 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpCtrldW Rfe Fence.rw.rwsRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=2; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlD, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=W,1:y=F,1:x=W
Com=Rf Rf
Orig=DpAddrdR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | lw x5,0(x6) ;
 xor x7,x5,x5    | fence rw,rw ;
 add x10,x9,x7   | ori x7,x0,1 ;
 lw x8,0(x10)    | sw x7,0(x8) ;
 lw x11,0(x9)    |             ;
 bne x11,x0,LC00 |             ;
 LC00:           |             ;
 ori x12,x0,1    |             ;
 sw x12,0(x9)    |             ;
exists (0:x5=1 /\ 1:x5=1)

use herd check start after pass transform DpAddrdR PosRR DpCtrlsW Rfe Fence.rw.rwdRW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, ctrlS, W, rfe, R, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 lw x12,0(x13) |             ;
exists (0:x5=1 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,2 ;
 lw x11,0(x9)  | sw x7,0(x6) ;
 fence rw,rw   |             ;
 lw x12,0(x6)  |             ;
exists (0:x5=2 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwdRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; , 0:x5=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; , 0:x5=2; 0:x12=2; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceD, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 fence rw,rw   |             ;
 lw x12,0(x9)  |             ;
exists (0:x5=1 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR Fence.rw.rwsRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, fenceS, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR PodRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x13=z;
1:x6=z; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 lw x12,0(x13) |             ;
exists (0:x5=1 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR PodRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=0; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=0; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po, R, fre, W, fenceS, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PodRR Fre Fence.rw.rwsWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PodRR Fre Fence.rw.rwsWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PodRR Fre Fence.rw.rwsWW Rfe"
Generator=diyone7 (version 7.56)
Com=Fr Rf
Orig=DpAddrdR PosRR PodRR Fre Fence.rw.rwsWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,2 ;
 lw x11,0(x9)  | sw x7,0(x6) ;
 lw x12,0(x6)  |             ;
exists (0:x5=2 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR PodRR Fre Fence.rw.rwsWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; , 0:x5=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; , 0:x5=1; 0:x12=2; , 0:x5=2; 0:x12=2; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR PosRR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR PosRR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR PosRR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR PosRR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0            | P1          ;
 lw x5,0(x6)   | ori x5,x0,1 ;
 xor x7,x5,x5  | sw x5,0(x6) ;
 add x10,x9,x7 | fence rw,rw ;
 lw x8,0(x10)  | ori x7,x0,1 ;
 lw x11,0(x9)  | sw x7,0(x8) ;
 lw x12,0(x9)  |             ;
exists (0:x5=1 /\ 0:x12=0)

use herd check start after pass transform DpAddrdR PosRR PosRR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x12=0; , 0:x5=0; 0:x12=1; , 0:x5=1; 0:x12=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, po-loc, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:y=T,1:y=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y;
1:x6=y; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 add x14,x9,x12  |             ;
 lw x13,0(x14)   |             ;
exists (0:x5=1 /\ 0:x13=0)

use herd check start after pass transform DpAddrdR PosRR DpAddrsR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=1; ]}
[]
use herd check result:  False
check legal [R, addrD, R, rsw, R, addrS, R, fre, W, fenceD, R, rfe]
check legal [R, addrD, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrS, R, fre, W, fenceS, W, rfe]
check legal [R, addrD, R, rsw, R, addrS, R, fre, W, fenceS, R, rfe]
check legal [R, addrD, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
check legal pass [R, addrD, R, rsw, R, addrD, R, fre, W, fenceD, W, rfe]
use herd check start before pass transform DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
diyone7 cmd: eval $(opam env);diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
RISCV /home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
"DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x14=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 add x15,x14,x12 |             ;
 lw x13,0(x15)   |             ;
exists (0:x5=1 /\ 0:x13=0)

use herd check start after pass transform DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=0; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test': [0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=1; ]}
/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test
[0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=1; ]
[0:x5=0; 0:x13=0; , 0:x5=0; 0:x13=1; , 0:x5=1; 0:x13=0; , 0:x5=1; 0:x13=1; ]
['/home/whq/Desktop/code_list/slide/src/slide/../output/test_ppo/new_test']
use herd check result:  True
now find ppo:[R];rsw;[R], static time:1565
now find ppo:[R];rsw;[R], herd time:319
[R];addr;[R];rsw;[R];addr;[R];fre;[W];fencerel(Fence.rw.rw);[W];rfe
RISCV R_rsw_R_DpAddrdR_PosRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe
"DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe"
Generator=diyone7 (version 7.56)
Prefetch=0:x=F,0:z=T,1:z=F,1:x=W
Com=Fr Rf
Orig=DpAddrdR PosRR DpAddrdR Fre Fence.rw.rwdWW Rfe
{
0:x6=x; 0:x9=y; 0:x14=z;
1:x6=z; 1:x8=x;
}
 P0              | P1          ;
 lw x5,0(x6)     | ori x5,x0,1 ;
 xor x7,x5,x5    | sw x5,0(x6) ;
 add x10,x9,x7   | fence rw,rw ;
 lw x8,0(x10)    | ori x7,x0,1 ;
 lw x11,0(x9)    | sw x7,0(x8) ;
 xor x12,x11,x11 |             ;
 add x15,x14,x12 |             ;
 lw x13,0(x15)   |             ;
exists (0:x5=1 /\ 0:x13=0)

R_rsw_R_DpAddrdR_PosRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe
