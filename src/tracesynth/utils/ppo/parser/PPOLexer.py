# Generated from PPO.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,244,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,211,8,6,1,7,4,7,214,8,7,11,7,12,7,215,1,
        7,1,7,1,8,1,8,1,8,1,8,5,8,224,8,8,10,8,12,8,227,9,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,5,9,238,8,9,10,9,12,9,241,9,9,1,9,1,9,1,
        225,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,3,2,0,
        82,82,87,87,3,0,9,10,12,13,32,32,2,0,10,10,13,13,282,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,23,
        1,0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,9,29,1,0,0,0,11,31,1,0,0,0,13,
        210,1,0,0,0,15,213,1,0,0,0,17,219,1,0,0,0,19,233,1,0,0,0,21,22,5,
        40,0,0,22,2,1,0,0,0,23,24,5,41,0,0,24,4,1,0,0,0,25,26,5,124,0,0,
        26,6,1,0,0,0,27,28,5,38,0,0,28,8,1,0,0,0,29,30,5,92,0,0,30,10,1,
        0,0,0,31,32,5,59,0,0,32,12,1,0,0,0,33,211,5,77,0,0,34,35,5,82,0,
        0,35,36,5,67,0,0,36,37,5,115,0,0,37,211,5,99,0,0,38,39,5,65,0,0,
        39,211,5,81,0,0,40,41,5,82,0,0,41,211,5,76,0,0,42,43,5,65,0,0,43,
        44,5,81,0,0,44,45,5,82,0,0,45,211,5,76,0,0,46,211,7,0,0,0,47,48,
        5,65,0,0,48,49,5,77,0,0,49,211,5,79,0,0,50,51,5,88,0,0,51,52,5,83,
        0,0,52,211,5,99,0,0,53,54,5,88,0,0,54,55,5,76,0,0,55,211,5,114,0,
        0,56,57,5,114,0,0,57,58,5,109,0,0,58,211,5,119,0,0,59,60,5,97,0,
        0,60,61,5,100,0,0,61,62,5,100,0,0,62,211,5,114,0,0,63,64,5,100,0,
        0,64,65,5,97,0,0,65,66,5,116,0,0,66,211,5,97,0,0,67,68,5,99,0,0,
        68,69,5,116,0,0,69,70,5,114,0,0,70,211,5,108,0,0,71,72,5,112,0,0,
        72,211,5,111,0,0,73,74,5,108,0,0,74,75,5,111,0,0,75,211,5,99,0,0,
        76,77,5,114,0,0,77,211,5,102,0,0,78,79,5,114,0,0,79,80,5,102,0,0,
        80,211,5,105,0,0,81,82,5,114,0,0,82,83,5,102,0,0,83,211,5,101,0,
        0,84,85,5,114,0,0,85,86,5,115,0,0,86,211,5,119,0,0,87,88,5,99,0,
        0,88,211,5,111,0,0,89,90,5,99,0,0,90,91,5,111,0,0,91,211,5,105,0,
        0,92,93,5,99,0,0,93,94,5,111,0,0,94,211,5,101,0,0,95,96,5,102,0,
        0,96,211,5,114,0,0,97,98,5,102,0,0,98,99,5,114,0,0,99,211,5,105,
        0,0,100,101,5,102,0,0,101,102,5,114,0,0,102,211,5,101,0,0,103,104,
        5,112,0,0,104,105,5,111,0,0,105,106,5,45,0,0,106,107,5,108,0,0,107,
        108,5,111,0,0,108,211,5,99,0,0,109,110,5,102,0,0,110,111,5,101,0,
        0,111,112,5,110,0,0,112,113,5,99,0,0,113,114,5,101,0,0,114,115,5,
        95,0,0,115,116,5,114,0,0,116,117,5,119,0,0,117,118,5,95,0,0,118,
        119,5,114,0,0,119,211,5,119,0,0,120,121,5,102,0,0,121,122,5,101,
        0,0,122,123,5,110,0,0,123,124,5,99,0,0,124,125,5,101,0,0,125,126,
        5,95,0,0,126,127,5,114,0,0,127,128,5,119,0,0,128,129,5,95,0,0,129,
        211,5,119,0,0,130,131,5,102,0,0,131,132,5,101,0,0,132,133,5,110,
        0,0,133,134,5,99,0,0,134,135,5,101,0,0,135,136,5,95,0,0,136,137,
        5,114,0,0,137,138,5,119,0,0,138,139,5,95,0,0,139,211,5,114,0,0,140,
        141,5,102,0,0,141,142,5,101,0,0,142,143,5,110,0,0,143,144,5,99,0,
        0,144,145,5,101,0,0,145,146,5,95,0,0,146,147,5,114,0,0,147,148,5,
        95,0,0,148,149,5,114,0,0,149,211,5,119,0,0,150,151,5,102,0,0,151,
        152,5,101,0,0,152,153,5,110,0,0,153,154,5,99,0,0,154,155,5,101,0,
        0,155,156,5,95,0,0,156,157,5,114,0,0,157,158,5,95,0,0,158,211,5,
        114,0,0,159,160,5,102,0,0,160,161,5,101,0,0,161,162,5,110,0,0,162,
        163,5,99,0,0,163,164,5,101,0,0,164,165,5,95,0,0,165,166,5,114,0,
        0,166,167,5,95,0,0,167,211,5,119,0,0,168,169,5,102,0,0,169,170,5,
        101,0,0,170,171,5,110,0,0,171,172,5,99,0,0,172,173,5,101,0,0,173,
        174,5,95,0,0,174,175,5,119,0,0,175,176,5,95,0,0,176,177,5,114,0,
        0,177,211,5,119,0,0,178,179,5,102,0,0,179,180,5,101,0,0,180,181,
        5,110,0,0,181,182,5,99,0,0,182,183,5,101,0,0,183,184,5,95,0,0,184,
        185,5,119,0,0,185,186,5,95,0,0,186,211,5,119,0,0,187,188,5,102,0,
        0,188,189,5,101,0,0,189,190,5,110,0,0,190,191,5,99,0,0,191,192,5,
        101,0,0,192,193,5,95,0,0,193,194,5,119,0,0,194,195,5,95,0,0,195,
        211,5,114,0,0,196,197,5,102,0,0,197,198,5,101,0,0,198,199,5,110,
        0,0,199,200,5,99,0,0,200,201,5,101,0,0,201,202,5,95,0,0,202,203,
        5,116,0,0,203,204,5,115,0,0,204,211,5,111,0,0,205,206,5,102,0,0,
        206,207,5,101,0,0,207,208,5,110,0,0,208,209,5,99,0,0,209,211,5,101,
        0,0,210,33,1,0,0,0,210,34,1,0,0,0,210,38,1,0,0,0,210,40,1,0,0,0,
        210,42,1,0,0,0,210,46,1,0,0,0,210,47,1,0,0,0,210,50,1,0,0,0,210,
        53,1,0,0,0,210,56,1,0,0,0,210,59,1,0,0,0,210,63,1,0,0,0,210,67,1,
        0,0,0,210,71,1,0,0,0,210,73,1,0,0,0,210,76,1,0,0,0,210,78,1,0,0,
        0,210,81,1,0,0,0,210,84,1,0,0,0,210,87,1,0,0,0,210,89,1,0,0,0,210,
        92,1,0,0,0,210,95,1,0,0,0,210,97,1,0,0,0,210,100,1,0,0,0,210,103,
        1,0,0,0,210,109,1,0,0,0,210,120,1,0,0,0,210,130,1,0,0,0,210,140,
        1,0,0,0,210,150,1,0,0,0,210,159,1,0,0,0,210,168,1,0,0,0,210,178,
        1,0,0,0,210,187,1,0,0,0,210,196,1,0,0,0,210,205,1,0,0,0,211,14,1,
        0,0,0,212,214,7,1,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,
        0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,6,7,0,0,218,16,1,0,
        0,0,219,220,5,47,0,0,220,221,5,42,0,0,221,225,1,0,0,0,222,224,9,
        0,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,226,1,0,0,0,225,223,1,
        0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,42,0,0,229,230,5,
        47,0,0,230,231,1,0,0,0,231,232,6,8,1,0,232,18,1,0,0,0,233,234,5,
        47,0,0,234,235,5,47,0,0,235,239,1,0,0,0,236,238,8,2,0,0,237,236,
        1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,
        1,0,0,0,241,239,1,0,0,0,242,243,6,9,1,0,243,20,1,0,0,0,5,0,210,215,
        225,239,2,6,0,0,0,1,0
    ]

class PPOLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    RELATION = 7
    WS = 8
    COMMENT = 9
    LINE_COMMENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'|'", "'&'", "'\\'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "RELATION", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "RELATION", 
                  "WS", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "PPO.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


